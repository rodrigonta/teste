
==================== FINAL INTERFACE ====================
2016-05-20 01:10:14.766925 UTC

interface main@main:Main [family instance module] 7103
  interface hash: 7466bdd50ac7266e025af1dd65febb68
  ABI hash: 3db885e51c0fad8a64341132a2853ac7
  export-list hash: ae2417e0deb1c51102908852b353600c
  orphan hash: b09177051970f67e89f464802b46bedd
  flag hash: 7752062497fd05e4bcb9a423582f58aa
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: aeson-compat-0.3.2.0@aeson_3ksJrprimYA6rSQ9jJmLhw
                      aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak
                      ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG
                      auto-update-0.1.3@autou_19qtEoqMgV6FQlA1CkY9Cg base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      base-compat-0.9.0@basec_3G7TOYmSpaF0smBtbGU3h4
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_4KI2nf4lf9oHEgXiILyTYj
                      blaze-markup-0.7.0.3@blaze_C7imNkL0ufD2cjmU64FP9k
                      blaze-html-0.8.1.1@blaze_Iq6GES6DAMS0745KzFL7i6
                      byteable-0.1.1@bytea_38yjJsjDRm9KusCn8Yo4aB
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_05l5iiwk2FiGu4DeOqOIxC
                      cereal-0.5.1.0@cerea_843xOxvPj94HAJ9SD4EJuq
                      cipher-aes-0.2.11@ciphe_8XNwNKI71EdCLNQ4WGdMQq
                      clientsession-0.9.1.1@clien_LuobzRZeZj55iOint27HgG
                      conduit-1.2.6.4@condu_1EneW8yRsjj18l2EfcgLyu
                      conduit-extra-1.1.13.1@condu_JrYHSonW303HUe4R7rhE0T
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cookie-0.4.1.6@cooki_2Eb4iZo39x3Ihl7jVKbtZO
                      cprng-aes-0.6.1@cprng_FqpwhJtWO8g27pB5PJZtIq
                      crypto-random-0.0.9@crypt_7BiCOK9v78J36YeClUc9KE
                      crypto-cipher-types-0.0.9@crypt_AkbdiYWeXYI5D4jAOMIXve
                      crypto-api-0.13.2@crypt_Kp4uvZbywBzKttuHrlYBAx
                      css-text-0.1.2.1@csste_BKK1KtEb1sJ9s7LwxLpwLq
                      data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe
                      data-default-0.5.3@datad_DLQPsKM7BNMFfKH45X8LEe
                      data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk
                      data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY
                      data-default-class-0.0.1@datad_K91y8NcZUJI9yaBI61rgdD
                      data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      easy-file-0.2.1@easyf_IjQ6MMskJyDEpOwcfCdF0G
                      email-validate-2.2.0@email_CQXkJx3ILx16knsHT8WvIg
                      entropy-0.3.7@entro_7gYJ61Ci0NNBp8LB4CGmrG
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      fast-logger-2.4.2@fastl_9KabkQKxs4VCYNsM5TfIRe
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I
                      http2-1.4.5@http2_DiIK6FZsEORCMOaqj3QSEe
                      http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP
                      http-date-0.0.6.1@httpd_K48ICbZdR7j4Lbow4Laii0
                      http-types-0.9@httpt_1qktWOgbYARKyaY9syDTns integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT
                      lifted-base-0.2.3.6@lifte_DoOvgrTvmEtENHs0ypaZTR
                      memory-0.11@memor_0EiEBIg44i8KGjAeoKnPDs
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS
                      monad-logger-0.3.18@monad_J6La1we3TquCPYRiGrmUYe
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO
                      persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie
                      persistent-template-2.1.6@persi_8sx7YoFzuVB3T9GqWSsIHz
                      persistent-postgresql-2.2.2@persi_GEuAA7V2ZvKExxgJjBYicy
                      postgresql-libpq-0.9.1.1@postg_6f9D1As2FCe0fjZpXXvHvS
                      postgresql-simple-0.5.1.2@postg_9k9Uw6R9foNDbRYAVYjlMk
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      psqueues-0.2.2.0@psque_Eu4cvucK9D300LguHeaq9c
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ
                      resource-pool-0.2.3.2@resou_BPzNUl5kJsI1qo7V284Tgq
                      safe-0.3.9@safe_Eus5OohxO2XHvdWxKAmhFS
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      securemem-0.1.9@secur_ArobkR9k7uwJiSXmFUrDYT
                      semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO
                      shakespeare-2.0.8@shake_1o7sYIVV5UR9j4PxxRPUv5
                      silently-1.2.5@silen_5nVdOe0bUXfLPEbxHJT4m4
                      simple-sendfile-0.2.21@simpl_1s4YZSsjn6TCbK7MVn1EXz
                      skein-1.0.9.4@skein_Gu4ZCUdyHoJKdYGOgDHOva
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      stm-chans-3.0.0.4@stmch_4ac5OLG4E0w1rpuIDCribD
                      streaming-commons-0.1.15.2@strea_0Pv1kz8leJoAmtjyRTUWHG
                      stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY
                      tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD
                      tagsoup-0.13.9@tagso_3I5x83DoCVBIz4INMBLU3R
                      template-haskell-2.10.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      time-locale-compat-0.1.1.1@timel_Ciz7M1U3da73rRwCjRF3Np
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unix-compat-0.4.1.4@unixc_Km8uiabmElX5mrb8D4Fywe
                      unix-time-0.3.6@unixt_4DXmhADld9WFju1Q636Hdx
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr
                      vault-0.3.0.6@vault_8aId1RjvIBs9AcRd6Dlytd
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      wai-3.2.0.1@wai_AgFrViB2yrqBxAB1eV1Klt
                      wai-extra-3.0.15@waiex_K4y73Rum0vqBOJacix7YcZ
                      wai-logger-2.2.5@wailo_EOCR0JEz9CSBm71ePYsS1j
                      warp-3.2.2@warp_CKkF85pkIK9I3ekwa5mjPN
                      word8-0.1.2@word8_6yKBsGbmsbLB2UCORShr75
                      xss-sanitize-0.3.5.6@xsssa_JdGY8fSYBM7LAdXrSOFQKS
                      yesod-persistent-1.4.0.4@yesod_3uaRZBCppQBHNBBQQ7ztwt
                      yesod-1.4.2.1@yesod_6BThshHwPAoI5mJ6AoEAbk
                      yesod-form-1.4.7@yesod_6rS4TZWVYaz6BDDuViI3c4
                      yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
orphans: aeson-compat-0.3.2.0@aeson_3ksJrprimYA6rSQ9jJmLhw:Data.Aeson.Compat
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         crypto-api-0.13.2@crypt_Kp4uvZbywBzKttuHrlYBAx:Crypto.Classes
         data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe:Data.Default.Instances.Base
         data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk:Data.Default.Instances.DList
         data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY:Data.Default.Instances.Containers
         data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ:Data.Default.Instances.OldLocale
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Orphan.PersistUnique
         persistent-template-2.1.6@persi_8sx7YoFzuVB3T9GqWSsIHz:Database.Persist.TH
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         unix-time-0.3.6@unixt_4DXmhADld9WFju1Q636Hdx:Data.UnixTime.Diff
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         email-validate-2.2.0@email_CQXkJx3ILx16knsHT8WvIg:Text.Email.Parser
                         iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT:Data.IP.Addr
                         iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT:Data.IP.Range
                         monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS:Control.Monad.Trans.Control
                         monad-logger-0.3.18@monad_J6La1we3TquCPYRiGrmUYe:Control.Monad.Logger
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67:Network.URI
                         persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Class.PersistConfig
                         persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Orphan.PersistStore
                         persistent-postgresql-2.2.2@persi_GEuAA7V2ZvKExxgJjBYicy:Database.Persist.Postgresql
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ:Control.Monad.Trans.Resource.Internal
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.List.NonEmpty
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.Semigroup
                         shakespeare-2.0.8@shake_1o7sYIVV5UR9j4PxxRPUv5:Text.Css
                         shakespeare-2.0.8@shake_1o7sYIVV5UR9j4PxxRPUv5:Text.Shakespeare
                         tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Class.Handler
                         yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Internal.LiteApp
                         yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Types
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Class f2f2ded551307c4c8a376ba36628360c
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances de843228e06930b2332d1934c97dae62
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Internal 10cb4888133b134ffafcc41bb2baa9d2
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.Proxy ace6418f386b055d277aea86443e836b
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  blaze-markup-0.7.0.3@blaze_C7imNkL0ufD2cjmU64FP9k:Text.Blaze.Internal 2898da33690d2db163df0dc76596091c
import  -/  blaze-html-0.8.1.1@blaze_Iq6GES6DAMS0745KzFL7i6:Text.Blaze.Html 75b0386c9ee854906d7c6830574b4617
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal dfa34e211eb5d18268ce7a397234e851
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base 681af891dffe392ee938c8b49d69f236
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP:Web.HttpApiData.Internal d4a95ffe9919bf31bb4c3c3a73306e22
import  -/  monad-logger-0.3.18@monad_J6La1we3TquCPYRiGrmUYe:Control.Monad.Logger 81b2a49985398c057f2d91b2d9eaf8fc
import  -/  path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO:Web.PathPieces e7a246921fcfef213af85b6de92fc54c
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Class.PersistEntity 3d33fe3fbfb2bbb1c148317791bf571e
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Class.PersistField f7105c8d3fea915950ec0e0f649d424d
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Class.PersistStore 4b4b9d4bf5c256252d4ca8cbe5818ccc
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Class 5356ff5f1bb2361294f584779320c5f5
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Migration 293d82a083822e623ef6a252b90747bc
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Run 547ab6fcc64d76f0c9d57d3ab4635cb2
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Sql.Types 2557d35b19b2f9e56e5c3d2c3908a39a
import  -/  persistent-2.2.4.1@persi_28DyVqBYnx4IatlD1Qhuie:Database.Persist.Types.Base 41e443a6d246d72001e37f6cc3b17fab
import  -/  persistent-template-2.1.6@persi_8sx7YoFzuVB3T9GqWSsIHz:Database.Persist.TH 812b61adf61bfa0f991e13a8f002607a
import  -/  persistent-postgresql-2.2.2@persi_GEuAA7V2ZvKExxgJjBYicy:Database.Persist.Postgresql 83c575881d85173300453785028e12aa
import  -/  shakespeare-2.0.8@shake_1o7sYIVV5UR9j4PxxRPUv5:Text.Css 354a5a67eedb1d6f80a82ff1e9f1167c
import  -/  shakespeare-2.0.8@shake_1o7sYIVV5UR9j4PxxRPUv5:Text.Shakespeare.I18N 2407116f03c7667207de779d1cae5f76
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
import  -/  unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base 382e2d511fbf53f3ec913fb766517aef
import  -/  unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Strict 7b909ae7e2f8d6f19a785f420e689251
import  -/  wai-3.2.0.1@wai_AgFrViB2yrqBxAB1eV1Klt:Network.Wai.Internal 4840806ef9331ea0b36e457ca8258b9c
import  -/  yesod-persistent-1.4.0.4@yesod_3uaRZBCppQBHNBBQQ7ztwt:Yesod.Persist.Core facb8f12641369c115e79e2af8484311
import  -/  yesod-1.4.2.1@yesod_6BThshHwPAoI5mJ6AoEAbk:Yesod 1e7326a307fd36f939e1a83b30324307
import  -/  yesod-form-1.4.7@yesod_6rS4TZWVYaz6BDDuViI3c4:Yesod.Form.Fields d580cf2005d76c04c27cd44f190c9e2d
import  -/  yesod-form-1.4.7@yesod_6rS4TZWVYaz6BDDuViI3c4:Yesod.Form.Functions 2ffe30cf5479bc6caa43ddc543de99b4
import  -/  yesod-form-1.4.7@yesod_6rS4TZWVYaz6BDDuViI3c4:Yesod.Form.Types cf1f76ffa32b07f582fd46b6c4d509b4
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Class.Dispatch 21a9a76e3b7aeba215b62735af7737a7
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Class.Yesod 71950a8e088bbe4984cac66791e91fc0
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Dispatch 34dbcd0e6806ed4f53736f0b5efb34ae
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Handler 873a6a964abd41ff51a19b2315f83ab9
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Internal.Run 025fc28936cb807d8dd320ff05cc0793
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Internal.TH 1bd5d395ad9820c1958ffb35e345e2be
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Types 5f739628cafdbb7e0fc7710e9874dca4
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Core.Widget c8874eb967c6fe75e83fb00dba3fe1f3
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Routes.Class 4da6b3ae020f6a1be24878b8d822dd7f
import  -/  yesod-core-1.4.20@yesod_JLQQ4eq0CXi8EhcgvEN35F:Yesod.Routes.TH.Types 7da7d86bf13c48c576b9e78ab7c8db92
addDependentFile "/home/ubuntu/.stack/programs/x86_64-linux/ghc-7.10.3/lib/ghc-7.10.3/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.22.5.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
6a889f0fb1bb02a71b729da7d28f7731
  $fEqKey ::
    GHC.Classes.Eq
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fEqKey_$c==
                  Main.$fEqKey_$c/= -}
6a889f0fb1bb02a71b729da7d28f7731
  $fEqKey_$c/= ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fBitsInt64_$c/=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fEqKey_$c== ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fEqInt64_$c==
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
cded40edb154341cc052ead338bfbfdf
  $fEqRoute :: GHC.Classes.Eq (Yesod.Routes.Class.Route Main.Pagina)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Pagina)
                  Main.$fEqRoute_$c==
                  Main.$fEqRoute_$c/= -}
cded40edb154341cc052ead338bfbfdf
  $fEqRoute_$c/= ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Routes.Class.Route Main.Pagina -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a152 :: Yesod.Routes.Class.Route Main.Pagina
                   b :: Yesod.Routes.Class.Route Main.Pagina ->
                 case a152 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.HomeR -> GHC.Types.False }
                   Main.ClienteR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.ClienteR -> GHC.Types.False }
                   Main.ChecarclienteR a153
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.ChecarclienteR b1
                        -> case a153
                                  `cast`
                                (Trans
                                     (Sub (Main.TFCo:R:KeyClientex[0]))
                                     (Trans
                                          (Main.NTCo:R:KeyClientex[0])
                                          (Trans
                                               (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                               (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) of wild2 { GHC.Int.I64# a154 ->
                           case b1
                                  `cast`
                                (Trans
                                     (Sub (Main.TFCo:R:KeyClientex[0]))
                                     (Trans
                                          (Main.NTCo:R:KeyClientex[0])
                                          (Trans
                                               (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                               (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) of wild3 { GHC.Int.I64# b2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# a154 b2) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } }
                   Main.ErroR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.ErroR -> GHC.Types.False } }) -}
cded40edb154341cc052ead338bfbfdf
  $fEqRoute_$c== ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Routes.Class.Route Main.Pagina -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds1 :: Yesod.Routes.Class.Route Main.Pagina
                   ds2 :: Yesod.Routes.Class.Route Main.Pagina ->
                 case ds1 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR
                   -> case ds2 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.HomeR -> GHC.Types.True }
                   Main.ClienteR
                   -> case ds2 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.ClienteR -> GHC.Types.True }
                   Main.ChecarclienteR a152
                   -> case ds2 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.ChecarclienteR b1
                        -> GHC.Int.$fEqInt64_$c==
                             a152
                               `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyClientex[0]))
                                  (Trans
                                       (Main.NTCo:R:KeyClientex[0])
                                       (Trans
                                            (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                            (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))))
                             b1
                               `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyClientex[0]))
                                  (Trans
                                       (Main.NTCo:R:KeyClientex[0])
                                       (Trans
                                            (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                            (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) }
                   Main.ErroR
                   -> case ds2 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.ErroR -> GHC.Types.True } }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromHttpApiDataKey ::
    Web.HttpApiData.Internal.FromHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fFromHttpApiDataKey_$cparseQueryParam
                  Main.$fFromHttpApiDataKey_$cparseHeader
                  Main.$fFromHttpApiDataKey_$cparseQueryParam -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromHttpApiDataKey_$cparseHeader ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseHeader
                  `cast`
                (<Data.ByteString.Internal.ByteString>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyClientex[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))))_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromHttpApiDataKey_$cparseQueryParam ::
    Data.Text.Internal.Text
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseUrlPiece
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyClientex[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))))_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromJSONClientex :: Data.Aeson.Types.Class.FromJSON Main.Clientex
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONClientex_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Main.Clientex>_N)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromJSONClientex_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.Clientex
  {- Arity: 1, Strictness: <S,1*U> -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromJSONEntity ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Clientex)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Clientex>_N)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromJSONEntity_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Entity Main.Clientex)
  {- Arity: 1,
     Unfolding: (Database.Persist.Class.PersistEntity.entityIdFromJSON
                   @ Main.Clientex
                   Main.$fPersistEntityClientex
                   Main.$fFromJSONClientex_$cparseJSON
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.Clientex>_N))
                   Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                     `cast`
                   (Trans
                        (<Data.Aeson.Types.Internal.Value>_R
                         ->_R (Data.Aeson.Types.Internal.Parser
                                 (Trans
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                                      (Trans
                                           (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                           (Trans
                                                (Sym (Main.NTCo:R:KeyClientex[0]))
                                                (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))))_R)
                        (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Clientex>_N)))) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fFromJSONKey ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityClientex_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Clientex>_N)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey ::
    GHC.Classes.Ord
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fEqKey
                  Main.$fOrdKey_$ccompare
                  Main.$fOrdKey_$c<
                  Main.$fOrdKey_$c<=
                  Main.$fOrdKey_$c>
                  Main.$fOrdKey_$c>=
                  Main.$fOrdKey_$cmax
                  Main.$fOrdKey_$cmin -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$c< ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$c<= ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$c> ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$c>= ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$ccompare ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$ccompare
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <GHC.Types.Ordering>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$cmax ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmax
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fOrdKey_$cmin ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmin
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyClientex[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))) -}
cded40edb154341cc052ead338bfbfdf
  $fParseRoutePagina :: Yesod.Routes.Class.ParseRoute Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fRenderRoutePagina
                  Main.$fParseRoutePagina_$cparseRoute -}
cded40edb154341cc052ead338bfbfdf
  $fParseRoutePagina_$cparseRoute ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Data.Text.Internal.Text],
                         [(Data.Text.Internal.Text, Data.Text.Internal.Text)]) ->
                 case w of ww { (,) ww1 ww2 -> Main.$w$cparseRoute ww1 }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPathPieceKey ::
    Web.PathPieces.PathPiece
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fPathPieceKey_$cfromPathPiece
                  Main.$fPathPieceKey_$ctoPathPiece -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPathPieceKey_$cfromPathPiece ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$sparseIntegral
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (GHC.Base.Maybe
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyClientex[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))))_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPathPieceKey_$ctoPathPiece ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex ::
    Database.Persist.Class.PersistEntity.PersistEntity Main.Clientex
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Clientex
                  Main.$fPersistFieldKey
                  Main.$fPersistEntityClientex_$ctoJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Clientex>_N))
                  Main.$fPersistEntityClientex_$cparseJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Clientex>_N))
                  Main.$fShowKey
                  Main.$fReadKey
                  Main.$fEqKey
                  Main.$fOrdKey
                  Main.$fPersistEntityClientex_$ckeyToValues
                  Main.$fPersistEntityClientex_$ckeyFromValues
                  Main.$fPersistEntityClientex_$s$WClientexId
                  Main.$fPersistEntityClientex_$centityDef
                  Main.$fPersistEntityClientex_$cpersistFieldDef
                  Main.$fPersistEntityClientex_$ctoPersistFields
                  Main.$fPersistEntityClientex_$cfromPersistValues
                  Main.$fPersistEntityClientex_$cpersistUniqueKeys
                  Main.$fPersistEntityClientex_$cpersistUniqueToFieldNames
                  Main.$fPersistEntityClientex_$cpersistUniqueToValues
                  Main.$fPersistEntityClientex_$cfieldLens -}
d83a0779ac6ebf5fa06fdde941c12af7
  $fPersistEntityClientex1 ::
    [Database.Persist.Types.Base.PersistValue]
  {- Strictness: b -}
19ac98d69081f7c978718e57e787939d
  $fPersistEntityClientex10 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "nome"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
1899e290caa5986f1d980d422a6124f4
  $fPersistEntityClientex11 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Id"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Clientex"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex16
                   Database.Persist.Types.Base.SqlInt64
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   (Database.Persist.Types.Base.ForeignRef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      Main.$fPersistEntityClientex12) } } }) -}
45178b20e0a9037b500a45e8311bd486
  $fPersistEntityClientex12 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   Main.$fPersistEntityClientex14
                   Main.$fPersistEntityClientex13) -}
2b4de18d6297e06cc24bd7f587d6574a
  $fPersistEntityClientex13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Int64"#) -}
56bfb44aefe26c88ff606f7c8db213d3
  $fPersistEntityClientex14 :: GHC.Base.Maybe Data.Text.Internal.Text
  {- Unfolding: (GHC.Base.Just
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntityClientex15) -}
f5af21a09e68cf93cf94003a14777527
  $fPersistEntityClientex15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Data.Int"#) -}
40ef9ac290362b56fc6b80c18266ceb0
  $fPersistEntityClientex16 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityClientex17) -}
f401a8cd180b79c4943210be2410ebed
  $fPersistEntityClientex17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "ClientexId"#) -}
ae6f056a40e638e5cab6933aa8cf995d
  $fPersistEntityClientex18 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Clientex"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "clientex"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Yesod.Core.Types.$fSerializeSessionCookie_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt2 { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityClientex16
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntityClientex12))
                   Main.$fPersistEntityClientex39
                   Main.$fPersistEntityClientex21
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntityClientex19
                   dt2
                   GHC.Types.False } } } } }) -}
b637e84a3f72d9da856e01c18b0feef1
  $fPersistEntityClientex19 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntityClientex20
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
885ae4a648a5d4d76131f30f1a67d224
  $fPersistEntityClientex2 ::
    [(Database.Persist.Types.Base.HaskellName,
      Database.Persist.Types.Base.DBName)]
  {- Strictness: b -}
2de3eccca9f85465bf30678a89194be2
  $fPersistEntityClientex20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Show"#) -}
cf952e3f30578cdcaf7408674c03b03c
  $fPersistEntityClientex21 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex37
                   Main.$fPersistEntityClientex22) -}
521be6c8d9164c68a92e46b23cb11ffc
  $fPersistEntityClientex22 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex35
                   Main.$fPersistEntityClientex23) -}
2333af64233cf864aee6c828852da2a3
  $fPersistEntityClientex23 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex33
                   Main.$fPersistEntityClientex24) -}
5fbe04bffe5ed38b1ecd0a818dc45689
  $fPersistEntityClientex24 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex31
                   Main.$fPersistEntityClientex25) -}
bc5a07bb36bd159182f5551ebb938dfd
  $fPersistEntityClientex25 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex29
                   Main.$fPersistEntityClientex26) -}
0258ee937ce660aca0ce3c4132af258c
  $fPersistEntityClientex26 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex27
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
53c3de0caf439469e5eaa34966c72088
  $fPersistEntityClientex27 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityClientex28 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
be9f1f86e08962620f9e2efff9f59ba1
  $fPersistEntityClientex28 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "estado"#) -}
80dc3aa5f38283df5dcee2dd051622a5
  $fPersistEntityClientex29 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityClientex30 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
012f5688d74b76080e2f21e46319c6b0
  $fPersistEntityClientex3 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "estado"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
bc71ea9796d68e764cd3d820e56366ac
  $fPersistEntityClientex30 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cidade"#) -}
4067c1b641a7e521109f5a59ed925c51
  $fPersistEntityClientex31 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityClientex32 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
134a33ed62afffee8a84c8dac70667a3
  $fPersistEntityClientex32 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "telefone"#) -}
6191eeab0da0441cfe14be5bc12a2324
  $fPersistEntityClientex33 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityClientex34 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
0ef3cdc48c74fac4a8975743804b5e18
  $fPersistEntityClientex34 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "endereco"#) -}
31a30ce936b0d4561bb05a4be6b7631a
  $fPersistEntityClientex35 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityClientex36 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
9545fa7e065f188bb15289afbefde27c
  $fPersistEntityClientex36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cpf"#) -}
231b924dc164a994da511962986f310b
  $fPersistEntityClientex37 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityClientex38 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
aea80c687dcfb9012f7850f636331ed0
  $fPersistEntityClientex38 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "nome"#) -}
a8c98a6de6af3574b661a744987cb776
  $fPersistEntityClientex39 :: [Database.Persist.Types.Base.Attr]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.Attr
                   Main.$fPersistEntityClientex40
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)) -}
eb9a14061a514a6b868331fdf9731f3c
  $fPersistEntityClientex4 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityClientex5) -}
75e455b10ea2c8536d4e8731109768f5
  $fPersistEntityClientex40 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "json"#) -}
2f28a4e06f31f43868eb250457c62dae
  $fPersistEntityClientex5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Text"#) -}
917617d5f3539b848b10fdbc7b8edb64
  $fPersistEntityClientex6 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "cidade"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
cbea166a40beaee5795f04b5e370735f
  $fPersistEntityClientex7 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "telefone"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
9db121ba9ae7bf9d01394d9f49709b45
  $fPersistEntityClientex8 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "endereco"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
2d2ef6532304b5393a4b1df26c955a2f
  $fPersistEntityClientex9 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "cpf"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityClientex4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$centityDef ::
    GHC.Base.Monad m =>
    m Main.Clientex -> Database.Persist.Types.Base.EntityDef
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   ds1 :: m Main.Clientex ->
                 Main.$fPersistEntityClientex18) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cfieldLens ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.Clientex field
    -> forall (f :: * -> *).
       GHC.Base.Functor f =>
       (field -> f field)
       -> Database.Persist.Class.PersistEntity.Entity Main.Clientex
       -> f (Database.Persist.Class.PersistEntity.Entity Main.Clientex)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U> -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cfromPersistValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either Data.Text.Internal.Text Main.Clientex
  {- Arity: 1, Strictness: <S,U> -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$ckeyFromValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x8 :: [Database.Persist.Types.Base.PersistValue] ->
                 case (Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                         (Database.Persist.TH.headNote x8))
                        `cast`
                      (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))))_R of wild {
                   Data.Either.Left x9
                   -> Data.Either.Left
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                        x9
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                        y `cast`
                        (Trans
                             (Sym (Main.NTCo:R:KeyClientex[0]))
                             (Sub (Sym (Main.TFCo:R:KeyClientex[0])))) }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$ckeyToValues ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x8 :: Database.Persist.Class.PersistEntity.Key Main.Clientex ->
                 GHC.Types.:
                   @ Database.Persist.Types.Base.PersistValue
                   (Database.Persist.Types.Base.PersistInt64
                      x8
                        `cast`
                      (Trans
                           (Sub (Main.TFCo:R:KeyClientex[0]))
                           (Trans
                                (Main.NTCo:R:KeyClientex[0])
                                (Trans
                                     (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                     (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                   (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                  `cast`
                (<Data.Aeson.Types.Internal.Value>_R
                 ->_R (Data.Aeson.Types.Internal.Parser
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyClientex[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))))_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cpersistFieldDef ::
    Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    -> Database.Persist.Types.Base.FieldDef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ typ
                   ds1 :: Database.Persist.Class.PersistEntity.EntityField
                            Main.Clientex typ ->
                 case ds1
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldClientextyp[0]) <typ>_N) of wild {
                   Main.ClientexId dt2 -> Main.$fPersistEntityClientex11
                   Main.ClientexNome dt2 -> Main.$fPersistEntityClientex10
                   Main.ClientexCpf dt2 -> Main.$fPersistEntityClientex9
                   Main.ClientexEndereco dt2 -> Main.$fPersistEntityClientex8
                   Main.ClientexTelefone dt2 -> Main.$fPersistEntityClientex7
                   Main.ClientexCidade dt2 -> Main.$fPersistEntityClientex6
                   Main.ClientexEstado dt2 -> Main.$fPersistEntityClientex3 }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cpersistUniqueKeys ::
    Main.Clientex
    -> [Database.Persist.Class.PersistEntity.Unique Main.Clientex]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*H,1*H,1*H,1*H,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex _nome _cpf _endereco _telefone _cidade _estado ->
                 GHC.Types.[]
                   @ (Database.Persist.Class.PersistEntity.Unique Main.Clientex) }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cpersistUniqueToFieldNames ::
    Database.Persist.Class.PersistEntity.Unique Main.Clientex
    -> [(Database.Persist.Types.Base.HaskellName,
         Database.Persist.Types.Base.DBName)]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Database.Persist.Class.PersistEntity.Unique
                            Main.Clientex ->
                 Main.$fPersistEntityClientex2) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$cpersistUniqueToValues ::
    Database.Persist.Class.PersistEntity.Unique Main.Clientex
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Database.Persist.Class.PersistEntity.Unique
                            Main.Clientex ->
                 Main.$fPersistEntityClientex1) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fToJSONInt64_$ctoJSON
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <Data.Aeson.Types.Internal.Value>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$ctoPersistFields ::
    Main.Clientex
    -> [Database.Persist.Class.PersistField.SomePersistField]
  {- Arity: 1, Strictness: <S(SSSSSS),1*U(U,U,U,U,U,U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Clientex ->
                 case w of ww { Main.Clientex ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GHC.Types.:
                   @ Database.Persist.Class.PersistField.SomePersistField
                   (Database.Persist.Class.PersistField.SomePersistField
                      @ Data.Text.Internal.Text
                      Database.Persist.Class.PersistField.$fPersistFieldText0
                      ww1)
                   (GHC.Types.:
                      @ Database.Persist.Class.PersistField.SomePersistField
                      (Database.Persist.Class.PersistField.SomePersistField
                         @ Data.Text.Internal.Text
                         Database.Persist.Class.PersistField.$fPersistFieldText0
                         ww2)
                      (GHC.Types.:
                         @ Database.Persist.Class.PersistField.SomePersistField
                         (Database.Persist.Class.PersistField.SomePersistField
                            @ Data.Text.Internal.Text
                            Database.Persist.Class.PersistField.$fPersistFieldText0
                            ww3)
                         (GHC.Types.:
                            @ Database.Persist.Class.PersistField.SomePersistField
                            (Database.Persist.Class.PersistField.SomePersistField
                               @ Data.Text.Internal.Text
                               Database.Persist.Class.PersistField.$fPersistFieldText0
                               ww4)
                            (GHC.Types.:
                               @ Database.Persist.Class.PersistField.SomePersistField
                               (Database.Persist.Class.PersistField.SomePersistField
                                  @ Data.Text.Internal.Text
                                  Database.Persist.Class.PersistField.$fPersistFieldText0
                                  ww5)
                               (GHC.Types.:
                                  @ Database.Persist.Class.PersistField.SomePersistField
                                  (Database.Persist.Class.PersistField.SomePersistField
                                     @ Data.Text.Internal.Text
                                     Database.Persist.Class.PersistField.$fPersistFieldText0
                                     ww6)
                                  (GHC.Types.[]
                                     @ Database.Persist.Class.PersistField.SomePersistField)))))) }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistEntityClientex_$s$WClientexId ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.Clientex
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Inline: INLINE,
     Unfolding: InlineRule (0, False, False)
                (Main.ClientexId
                   @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                   @~ <Database.Persist.Class.PersistEntity.Key Main.Clientex>_N)
                  `cast`
                (Sub (Sym (Main.TFCo:R:EntityFieldClientextyp[0])) <Database.Persist.Class.PersistEntity.Key
                                                                      Main.Clientex>_N) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldClientex ::
    Database.Persist.Class.PersistField.PersistField Main.Clientex
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Clientex
                  Main.$fPersistFieldClientex_$ctoPersistValue
                  Main.$fPersistFieldClientex_$cfromPersistValue -}
e36703ce4618465bca3eadd9a3c34f71
  $fPersistFieldClientex1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldClientex12
                   Main.$fPersistFieldClientex2) -}
2e61af9ee388198bf083e39c2186e7f9
  $fPersistFieldClientex10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "endereco"#) -}
cbd039eab705fd3840fc13b621bce608
  $fPersistFieldClientex11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cpf"#) -}
aeff6cd00d5cb06b912433e93d596612
  $fPersistFieldClientex12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "nome"#) -}
45fa2bc8cc153f166dbf8f64a0129024
  $fPersistFieldClientex13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4) -}
5772bb9554c230dbfeeadcea064005a0
  $fPersistFieldClientex14 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
9c0c3db2bf9a0880472a1e90ec4be927
  $fPersistFieldClientex2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldClientex11
                   Main.$fPersistFieldClientex3) -}
bc5b1268abeb4d03b348f28d23e97739
  $fPersistFieldClientex3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldClientex10
                   Main.$fPersistFieldClientex4) -}
1f21be414cd5d8c5d1527bf902510cbf
  $fPersistFieldClientex4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldClientex9
                   Main.$fPersistFieldClientex5) -}
42aef86fcbe7f249579e21c1159c45f8
  $fPersistFieldClientex5 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldClientex8
                   Main.$fPersistFieldClientex6) -}
fee5d80f3713bc6953050e615c00e5fe
  $fPersistFieldClientex6 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldClientex7
                   (GHC.Types.[] @ GHC.Base.String)) -}
6550e91391c8ff850b10e56294f8a867
  $fPersistFieldClientex7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "estado"#) -}
ba8386632d6158b3f3dbedd0a2deffd0
  $fPersistFieldClientex8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cidade"#) -}
d12eb35426770827e2fdb1714b0d9265
  $fPersistFieldClientex9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "telefone"#) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldClientex_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either Data.Text.Internal.Text Main.Clientex
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta2 :: Database.Persist.Types.Base.PersistValue ->
                 case Database.Persist.Class.PersistField.getPersistMap
                        eta2 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ Data.Text.Internal.Text @ Main.Clientex l
                   Data.Either.Right r
                   -> let {
                        columns :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     Database.Persist.Types.Base.PersistValue
                        = Data.Aeson.Types.Internal.$sfromList1
                            @ Database.Persist.Types.Base.PersistValue
                            r
                            (Data.HashMap.Base.Empty
                               @ Data.Text.Internal.Text
                               @ Database.Persist.Types.Base.PersistValue)
                      } in
                      Main.$fPersistEntityClientex_$cfromPersistValues
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ Database.Persist.Types.Base.PersistValue
                           (\ name :: GHC.Base.String ->
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                    Main.$fPersistFieldClientex14
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      Main.$fPersistFieldClientex13
                                      name
                                      0
                                      ipv }) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            case Data.Aeson.Types.Instances.$w$slookup
                                   @ Database.Persist.Types.Base.PersistValue
                                   ww1
                                   ww2
                                   ww3
                                   columns of wild1 {
                              GHC.Base.Nothing -> Database.Persist.Types.Base.PersistNull
                              GHC.Base.Just v -> v } })
                           Main.$fPersistFieldClientex1) }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldClientex_$ctoPersistValue ::
    Main.Clientex -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U,U,U)>m12,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Clientex ->
                 case Main.$w$ctoPersistValue w of ww { (##) ww1 ->
                 Database.Persist.Types.Base.PersistMap ww1 }) -}
a5661c27b011989686c1cfffccfb3c14
  $fPersistFieldClientex_$sgo ::
    [GHC.Types.Char]
    -> [[GHC.Types.Char]]
    -> [Database.Persist.Types.Base.PersistValue]
    -> [(Data.Text.Internal.Text,
         Database.Persist.Types.Base.PersistValue)]
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U> -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldKey ::
    Database.Persist.Class.PersistField.PersistField
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fPersistFieldKey_$ctoPersistValue
                  Main.$fPersistFieldKey_$cfromPersistValue -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldKey_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                  `cast`
                (<Database.Persist.Types.Base.PersistValue>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyClientex[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))))_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldKey_$ctoPersistValue ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Types.Base.PersistInt64
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <Database.Persist.Types.Base.PersistValue>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldSqlClientex ::
    Database.Persist.Sql.Class.PersistFieldSql Main.Clientex
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Clientex
                  Main.$fPersistFieldClientex
                  Main.$fPersistFieldSqlClientex_$csqlType -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldSqlClientex_$csqlType ::
    Data.Proxy.Proxy Main.Clientex
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Data.Proxy.Proxy Main.Clientex ->
                 Database.Persist.Types.Base.SqlString) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldSqlKey ::
    Database.Persist.Sql.Class.PersistFieldSql
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fPersistFieldKey
                  Main.$fPersistFieldSqlKey_$csqlType -}
6a889f0fb1bb02a71b729da7d28f7731
  $fPersistFieldSqlKey_$csqlType ::
    Data.Proxy.Proxy
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Sql.Class.$fPersistFieldSqlInt64_$csqlType
                  `cast`
                ((Data.Proxy.Proxy
                    <*>_N
                    (UnivCo opt_phantom phantom GHC.Int.Int64 (Database.Persist.Class.PersistEntity.Key
                                                                 Main.Clientex)))_R
                 ->_R <Database.Persist.Types.Base.SqlType>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey ::
    GHC.Read.Read
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fReadKey_$s$dmreadsPrec
                  Main.$fReadKey_$sreadListDefault
                  Main.$fReadKey_$creadPrec
                  Main.$fReadKey_$creadListPrec -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Database.Persist.Class.PersistEntity.Key Main.Clientex]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Database.Persist.Class.PersistEntity.Key Main.Clientex]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                   Main.$fReadKey2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Database.Persist.Class.PersistEntity.Key Main.Clientex>_R))
                   @ b
                   eta1) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                   Main.$fReadKey3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.Clientex>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Clientex>_R)))) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Clientex
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Clientex
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wa ww1 @ b w1 }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Database.Persist.Class.PersistEntity.Key Main.Clientex]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Database.Persist.Class.PersistEntity.Key Main.Clientex]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Database.Persist.Class.PersistEntity.Key Main.Clientex]>_R))) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Clientex>_R)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                   Main.$fReadKey_$creadPrec
                   eta) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fReadKey_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Database.Persist.Class.PersistEntity.Key Main.Clientex]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Database.Persist.Class.PersistEntity.Key Main.Clientex]
                   ((Main.$fReadKey_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Database.Persist.Class.PersistEntity.Key Main.Clientex]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Database.Persist.Class.PersistEntity.Key Main.Clientex]>_R)
                      @ [Database.Persist.Class.PersistEntity.Key Main.Clientex]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Database.Persist.Class.PersistEntity.Key Main.Clientex]))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute :: GHC.Read.Read (Yesod.Routes.Class.Route Main.Pagina)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Pagina)
                  Main.$fReadRoute_$s$dmreadsPrec
                  Main.$fReadRoute_$sreadListDefault
                  Main.$fReadRoute_$creadPrec
                  Main.$fReadRoute_$creadListPrec -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Yesod.Routes.Class.Route Main.Pagina]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Yesod.Routes.Class.Route Main.Pagina]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fReadRoute2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Yesod.Routes.Class.Route Main.Pagina>_R))
                   @ b
                   eta1) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds1 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.ErroR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
5b848d73790e1783d55a9825e7995cea
  $fReadRoute11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ErroR"#) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute14,
                  Main.$fReadRoute13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds1 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta
                   Main.ClienteR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
a381252be456d9fc4c604c963747dd43
  $fReadRoute14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClienteR"#) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute17,
                  Main.$fReadRoute16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds1 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.HomeR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
ab4f8f9b8d0c0b8438b0bc41e76dde24
  $fReadRoute17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HomeR"#) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fReadRoute3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Yesod.Routes.Class.Route Main.Pagina>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Yesod.Routes.Class.Route Main.Pagina>_R)))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ (Yesod.Routes.Class.Route Main.Pagina)
                      Main.$fReadRoute6
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x8 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x8 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl145 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl146 :: Text.ParserCombinators.ReadP.P b
                               = (GHC.Read.$fReadDouble10
                                    @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                                    Main.$fReadKey3
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <Database.Persist.Class.PersistEntity.Key
                                                           Main.Clientex>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <Database.Persist.Class.PersistEntity.Key
                                                      Main.Clientex>_R)))
                                    Main.$fReadRoute5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <Main.ClientexId>_R)
                                   @ b
                                   (\ a152 :: Main.ClientexId ->
                                    eta
                                      (Main.ChecarclienteR a152)
                                        `cast`
                                      (Sub (Sym (Main.TFCo:R:RoutePagina[0]))))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a152 :: Text.Read.Lex.Lexeme ->
                                case a152 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a153
                                  -> case GHC.Base.eqString a153 Main.$fReadRoute4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl146 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl145) -}
                           = \ w2 :: () -> lvl145
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a152 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a152)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k) } })) -}
10e9167953c017cd197bf3b647fad6c1
  $fReadRoute4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ChecarclienteR"#) -}
7f29a6f02db5478aa0881fdb68d7ce93
  $fReadRoute5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute15
                   Main.$fReadRoute7) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute12
                   Main.$fReadRoute8) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           (Yesod.Routes.Class.Route Main.Pagina)))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute11,
                  Main.$fReadRoute10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Yesod.Routes.Class.Route Main.Pagina]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Yesod.Routes.Class.Route Main.Pagina]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Yesod.Routes.Class.Route Main.Pagina]>_R))) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Yesod.Routes.Class.Route Main.Pagina>_R)) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fReadRoute_$creadPrec
                   eta) -}
cded40edb154341cc052ead338bfbfdf
  $fReadRoute_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Yesod.Routes.Class.Route Main.Pagina]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Yesod.Routes.Class.Route Main.Pagina]
                   ((Main.$fReadRoute_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Yesod.Routes.Class.Route Main.Pagina]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Yesod.Routes.Class.Route Main.Pagina]>_R)
                      @ [Yesod.Routes.Class.Route Main.Pagina]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Yesod.Routes.Class.Route Main.Pagina]))) -}
cded40edb154341cc052ead338bfbfdf
  $fRenderMessagePaginaFormMessage ::
    Text.Shakespeare.I18N.RenderMessage
      Main.Pagina Yesod.Form.Types.FormMessage
  DFunId[0]
  {- Arity: 3, Strictness: <L,A><L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fRenderMessagePaginaFormMessage_$crenderMessage
                  `cast`
                (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                          <Main.Pagina>_N <Yesod.Form.Types.FormMessage>_N)) -}
cded40edb154341cc052ead338bfbfdf
  $fRenderMessagePaginaFormMessage_$crenderMessage ::
    Main.Pagina
    -> [Text.Shakespeare.I18N.Lang]
    -> Yesod.Form.Types.FormMessage
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ ds1 :: Main.Pagina
                   ds2 :: [Text.Shakespeare.I18N.Lang]
                   eta :: Yesod.Form.Types.FormMessage ->
                 Yesod.Form.I18n.English.englishFormMessage eta) -}
cded40edb154341cc052ead338bfbfdf
  $fRenderRoutePagina :: Yesod.Routes.Class.RenderRoute Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fEqRoute
                  Main.$fRenderRoutePagina_$crenderRoute -}
0949c5fa69f2a57392edf82c431c7cad
  $fRenderRoutePagina1 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina2
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
ba51c72995606f7ed37646168de12a00
  $fRenderRoutePagina2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "erro"#) -}
b963013dcb760255a1353494f2f0e810
  $fRenderRoutePagina3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "checar"#) -}
d10f73533b8b6bf965dcd8c86a1a3a39
  $fRenderRoutePagina4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cliente"#) -}
946598abf4e07f23520eaa46ed738309
  $fRenderRoutePagina5 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina4
                   Main.$fRenderRoutePagina6) -}
30c2fffa0420912e0c0bb69f7bbfde41
  $fRenderRoutePagina6 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina7
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
150648988faceecf46fb0179378453ec
  $fRenderRoutePagina7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cadastro"#) -}
cded40edb154341cc052ead338bfbfdf
  $fRenderRoutePagina_$crenderRoute ::
    Yesod.Routes.Class.Route Main.Pagina
    -> ([Data.Text.Internal.Text],
        [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Yesod.Routes.Class.Route Main.Pagina ->
                 case w `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR
                   -> (GHC.Types.[] @ Data.Text.Internal.Text,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.ClienteR
                   -> (Main.$fRenderRoutePagina5,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.ChecarclienteR dyn
                   -> (GHC.Types.:
                         @ Data.Text.Internal.Text
                         Main.$fRenderRoutePagina4
                         (GHC.Types.:
                            @ Data.Text.Internal.Text
                            Main.$fRenderRoutePagina3
                            (GHC.Types.:
                               @ Data.Text.Internal.Text
                               (Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                                  dyn
                                    `cast`
                                  (Trans
                                       (Sub (Main.TFCo:R:KeyClientex[0]))
                                       (Trans
                                            (Main.NTCo:R:KeyClientex[0])
                                            (Trans
                                                 (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                                 (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                               (GHC.Types.[] @ Data.Text.Internal.Text))),
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.ErroR
                   -> (Main.$fRenderRoutePagina1,
                       GHC.Types.[]
                         @ (Data.Text.Internal.Text, Data.Text.Internal.Text)) }) -}
cded40edb154341cc052ead338bfbfdf
  $fRouteAttrsPagina :: Yesod.Routes.Class.RouteAttrs Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fRenderRoutePagina
                  Main.$fRouteAttrsPagina_$crouteAttrs -}
9f66bb79036ff91872e8cc9a195467fc
  $fRouteAttrsPagina1 :: Data.Set.Base.Set Data.Text.Internal.Text
  {- Unfolding: (Main.$fRouteAttrsPagina_$sfromList
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
cded40edb154341cc052ead338bfbfdf
  $fRouteAttrsPagina_$crouteAttrs ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Yesod.Routes.Class.Route Main.Pagina ->
                 case ds1 of tpl { DEFAULT -> Main.$fRouteAttrsPagina1 }) -}
8bf5088ef5c175c72eeac1ec0e625728
  $fRouteAttrsPagina_$s$wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 6, Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U> -}
7e4dc6fb827fbcffa8c26a99bf002350
  $fRouteAttrsPagina_$sfromList ::
    [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds1 :: [Data.Text.Internal.Text] ->
                 case ds1 of wild {
                   [] -> Data.Set.Base.Tip @ Data.Text.Internal.Text
                   : x8 ds2
                   -> case ds2 of wild1 {
                        []
                        -> case x8 of dt2 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Base.Bin
                             @ Data.Text.Internal.Text
                             1
                             dt2
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Main.$fRouteAttrsPagina_$sgo5
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                             GHC.Types.LT
                             -> Main.$fRouteAttrsPagina_$s$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1 } } } } }) -}
d912e4d5cc0f8ea1610757cfd2f5b105
  $fRouteAttrsPagina_$sgo5 ::
    Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowClientex :: GHC.Show.Show Main.Clientex
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Clientex
                  Main.$fShowClientex_$cshowsPrec
                  Main.$fShowClientex_$cshow
                  Main.$fShowClientex_$cshowList -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowClientex1 :: Main.Clientex -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Clientex w1 :: GHC.Base.String ->
                 case w of ww { Main.Clientex ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                 case ww2 of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                 case ww3 of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                 case ww4 of ww19 { Data.Text.Internal.Text ww20 ww21 ww22 ->
                 case ww5 of ww23 { Data.Text.Internal.Text ww24 ww25 ww26 ->
                 case ww6 of ww27 { Data.Text.Internal.Text ww28 ww29 ww30 ->
                 Main.$w$cshowsPrec1
                   0
                   ww8
                   ww9
                   ww10
                   ww12
                   ww13
                   ww14
                   ww16
                   ww17
                   ww18
                   ww20
                   ww21
                   ww22
                   ww24
                   ww25
                   ww26
                   ww28
                   ww29
                   ww30
                   w1 } } } } } } }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowClientex_$cshow :: Main.Clientex -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(SSSSSS),1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x8 :: Main.Clientex ->
                 Main.$fShowClientex_$cshowsPrec
                   GHC.Show.shows18
                   x8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowClientex_$cshowList :: [Main.Clientex] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Clientex
                   Main.$fShowClientex1) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowClientex_$cshowsPrec ::
    GHC.Types.Int -> Main.Clientex -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S(SSSSSS),1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Clientex w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Clientex ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww3 of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                 case ww4 of ww13 { Data.Text.Internal.Text ww14 ww15 ww16 ->
                 case ww5 of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                 case ww6 of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                 case ww7 of ww25 { Data.Text.Internal.Text ww26 ww27 ww28 ->
                 case ww8 of ww29 { Data.Text.Internal.Text ww30 ww31 ww32 ->
                 Main.$w$cshowsPrec1
                   ww1
                   ww10
                   ww11
                   ww12
                   ww14
                   ww15
                   ww16
                   ww18
                   ww19
                   ww20
                   ww22
                   ww23
                   ww24
                   ww26
                   ww27
                   ww28
                   ww30
                   ww31
                   ww32
                   w2 } } } } } } } }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowKey ::
    GHC.Show.Show
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fShowKey_$cshowsPrec
                  Main.$fShowKey_$cshow
                  Main.$fShowKey_$cshowList -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Database.Persist.Class.PersistEntity.Key
                          Main.Clientex
                   w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec 0 w w1) -}
bfd2bebf3ca4905a69033c2e17037260
  $fShowKey2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
206440e7e498423949c0767817bc97a9
  $fShowKey3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unClientexKey = "#) -}
d96239781cab8c9269238ea2e651e694
  $fShowKey4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClientexKey {"#) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowKey_$cshow ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x8 :: Database.Persist.Class.PersistEntity.Key Main.Clientex ->
                 Main.$fShowKey_$cshowsPrec
                   GHC.Show.shows18
                   x8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowKey_$cshowList ::
    [Database.Persist.Class.PersistEntity.Key Main.Clientex]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                   Main.$fShowKey1) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fShowKey_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Clientex
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
cded40edb154341cc052ead338bfbfdf
  $fShowRoute :: GHC.Show.Show (Yesod.Routes.Class.Route Main.Pagina)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Pagina)
                  Main.$fShowRoute_$cshowsPrec
                  Main.$fShowRoute_$cshow
                  Main.$fShowRoute_$cshowList -}
cded40edb154341cc052ead338bfbfdf
  $fShowRoute1 ::
    Yesod.Routes.Class.Route Main.Pagina -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowRoute_$cshowsPrec Main.$fShowRoute2) -}
57dfc9350d7c6e91788cb15bddabd397
  $fShowRoute2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
c0c9fb2b52452cb95008ced2e00cc484
  $fShowRoute3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ChecarclienteR "#) -}
cded40edb154341cc052ead338bfbfdf
  $fShowRoute_$cshow ::
    Yesod.Routes.Class.Route Main.Pagina -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x8 :: Yesod.Routes.Class.Route Main.Pagina ->
                 Main.$fShowRoute_$cshowsPrec
                   GHC.Show.shows18
                   x8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cded40edb154341cc052ead338bfbfdf
  $fShowRoute_$cshowList ::
    [Yesod.Routes.Class.Route Main.Pagina] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fShowRoute1) -}
cded40edb154341cc052ead338bfbfdf
  $fShowRoute_$cshowsPrec ::
    GHC.Types.Int
    -> Yesod.Routes.Class.Route Main.Pagina -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds1 :: GHC.Types.Int
                   ds2 :: Yesod.Routes.Class.Route Main.Pagina
                   eta :: GHC.Base.String ->
                 case ds2 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute17 eta
                   Main.ClienteR
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute14 eta
                   Main.ChecarclienteR b1
                   -> case ds1 of wild1 { GHC.Types.I# x8 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x8 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowRoute3
                             (Main.$w$cshowsPrec 11 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowRoute3
                                (Main.$w$cshowsPrec
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   Main.ErroR
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute11 eta }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToBackendKeySqlBackendClientex ::
    Database.Persist.Class.PersistStore.ToBackendKey
      Database.Persist.Sql.Types.SqlBackend Main.Clientex
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.SqlBackend
                  @ Main.Clientex
                  Main.$fPersistEntityClientex
                  (GHC.Types.Eq#
                     @ *
                     @ (Database.Persist.Class.PersistEntity.PersistEntityBackend
                          Main.Clientex)
                     @ Database.Persist.Sql.Types.SqlBackend
                     @~ (Main.TFCo:R:PersistEntityBackendClientex[0]))
                  Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreSqlBackend
                  Main.unClientexKey
                  (\ tpl :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend ->
                   tpl)
                    `cast`
                  (<Database.Persist.Class.PersistStore.BackendKey
                      Database.Persist.Sql.Types.SqlBackend>_R
                   ->_R Trans
                            (Sym (Main.NTCo:R:KeyClientex[0]))
                            (Sub (Sym (Main.TFCo:R:KeyClientex[0])))) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToHttpApiDataKey ::
    Web.HttpApiData.Internal.ToHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Clientex)
                  Main.$fToHttpApiDataKey_$ctoQueryParam
                  Main.$fToHttpApiDataKey_$ctoHeader
                  Main.$fToHttpApiDataKey_$ctoQueryParam -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToHttpApiDataKey_$ctoHeader ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoHeader
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <Data.ByteString.Internal.ByteString>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToHttpApiDataKey_$ctoQueryParam ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoUrlPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyClientex[0]))
                               (Sub (Sym (Main.TFCo:R:KeyClientex[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToJSONClientex :: Data.Aeson.Types.Class.ToJSON Main.Clientex
  DFunId[0]
  {- Arity: 1, Strictness: <S(SSSSSS),1*U(U,U,U,U,U,U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONClientex_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Clientex>_N)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToJSONClientex_$ctoJSON ::
    Main.Clientex -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SSSSSS),1*U(U,U,U,U,U,U)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Clientex ->
                 case w of ww { Main.Clientex ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$ctoJSON ww1 ww2 ww3 ww4 ww5 ww6 of ww7 { (##) ww8 ->
                 Data.Aeson.Types.Internal.Object ww8 } }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToJSONEntity ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Clientex)
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Clientex>_N)) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToJSONEntity_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Entity Main.Clientex
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Database.Persist.Class.PersistEntity.Entity
                           Main.Clientex ->
                 Database.Persist.Class.PersistEntity.$wentityIdToJSON
                   @ Main.Clientex
                   Main.$fToJSONClientex_$ctoJSON
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Clientex>_N))
                   w3) -}
6a889f0fb1bb02a71b729da7d28f7731
  $fToJSONKey ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Key Main.Clientex)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityClientex_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Clientex>_N)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodDispatchPagina ::
    Yesod.Core.Class.Dispatch.YesodDispatch Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fYesodPagina
                  Main.$fYesodDispatchPagina_$cyesodDispatch -}
cded40edb154341cc052ead338bfbfdf
  $fYesodDispatchPagina_$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.Pagina
    -> Network.Wai.Application
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><S(LLLLLLLSLLLLLLLL),1*U(U(U,U,U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Yesod.Core.Types.YesodRunnerEnv Main.Pagina
                   w1 :: Network.Wai.Internal.Request ->
                 case w1 of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Main.$w$cyesodDispatch
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 }) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina :: Yesod.Core.Class.Yesod.Yesod Main.Pagina
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fRenderRoutePagina
                  Main.$fYesodPagina_$s$dmapproot
                  Main.$fYesodPagina_$cerrorHandler
                  Main.$fYesodPagina_$cdefaultLayout
                  Main.$fYesodPagina_$s$dmurlRenderOverride
                  Main.$fYesodPagina_$cisAuthorized
                  Main.$fYesodPagina_$cisWriteRequest
                  Main.$fYesodPagina_$s$dmauthRoute
                  Main.$fYesodPagina_$ccleanPath
                  Main.$fYesodPagina_$cjoinPath
                  Main.$fYesodPagina_$caddStaticContent
                  Main.$fYesodPagina_$s$dmmaximumContentLength
                  Main.$fYesodPagina_$cmakeLogger
                  Main.$fYesodPagina_$cmessageLoggerSource
                  Main.$fYesodPagina_$s$dmjsLoader
                  Main.$fYesodPagina_$cmakeSessionBackend
                  Main.$fYesodPagina_$cfileUpload
                  Main.$fYesodPagina_$s$dmshouldLog
                  Main.$fYesodPagina_$cshouldLogIO
                  Main.$fYesodPagina_$cyesodMiddleware
                  Main.$fYesodPagina_$cyesodWithInternalState -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina1 ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ res
                   w :: Yesod.Core.Content.ToTypedContent res
                   w1 :: Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
                   w2 :: Yesod.Core.Types.HandlerData
                           Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Yesod.Core.Types.HandlerData ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wa1 @ res w1 ww1 ww2 ww3 ww4 ww5 w3 }) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina10 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.Pagina,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (5, True, True)
                (\ ds1 :: Data.Text.Internal.Text
                   ds2 :: Data.Text.Internal.Text
                   ds3 :: Data.ByteString.Lazy.Internal.ByteString
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1,
                    GHC.Base.Nothing
                      @ (Data.Either.Either
                           Data.Text.Internal.Text
                           (Yesod.Routes.Class.Route Main.Pagina,
                            [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)) -}
8898fc0c2ad2284500cdaee9ade9563c
  $fYesodPagina11 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1 -}
aa6c4dfa21acd9abd0f10c2c50855736
  $fYesodPagina12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
8e12da3ed371ea242a1fc009b227671f
  $fYesodPagina13 ::
    (Data.Text.Internal.Text, Data.Text.Internal.Text)
    -> (Data.ByteString.Internal.ByteString,
        GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Arity: 1,
     Unfolding: (\ ds1 :: (Data.Text.Internal.Text,
                           Data.Text.Internal.Text) ->
                 (case ds1 of wild { (,) x8 y -> Data.Text.Encoding.encodeUtf8 x8 },
                  case ds1 of wild { (,) x8 y ->
                  case y of wild1 { Data.Text.Internal.Text dt2 dt3 dt4 ->
                  case Data.Text.Internal.empty_ of wild2 { Data.Text.Internal.Text dt5 dt6 dt7 ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.==# dt4 dt7) of wild3 {
                    GHC.Types.False
                    -> GHC.Base.Just
                         @ Data.ByteString.Internal.ByteString
                         (Data.Text.Encoding.$wencodeUtf8 dt2 dt3 dt4)
                    GHC.Types.True
                    -> case {__pkg_ccall text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                              dt2
                              (GHC.Prim.int2Word# dt3)
                              dt5
                              (GHC.Prim.int2Word# dt6)
                              (GHC.Prim.int2Word# dt4)
                              GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                       case GHC.Prim.narrow32Int# ds12 of wild5 {
                         DEFAULT
                         -> GHC.Base.Just
                              @ Data.ByteString.Internal.ByteString
                              (Data.Text.Encoding.$wencodeUtf8 dt2 dt3 dt4)
                         0
                         -> GHC.Base.Nothing
                              @ Data.ByteString.Internal.ByteString } } } } } })) -}
85cd25d3fca6fb9454afc45a7d88d648
  $fYesodPagina14 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1,
     Unfolding: (\ t :: Data.Text.Internal.Text ->
                 case t of wild { Data.Text.Internal.Text dt2 dt3 dt4 ->
                 let {
                   a152 :: GHC.Prim.Int# = GHC.Prim.+# dt3 dt4
                 } in
                 letrec {
                   $wloop_all :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a152) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt2 ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                 DEFAULT -> GHC.Types.False '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt2
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                    10)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                              65536) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 2) } } } } }
                       GHC.Types.True -> GHC.Types.True }
                 } in
                 case $wloop_all dt3 of wild1 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# 1 dt4) of wild3 {
                        GHC.Types.False
                        -> case Data.Text.$witerN
                                  Main.$fYesodPagina15
                                  dt2
                                  dt3
                                  dt4 of ww4 { DEFAULT ->
                           case GHC.Prim.-# dt4 ww4 of wild5 {
                             DEFAULT -> Data.Text.Internal.Text dt2 (GHC.Prim.+# dt3 ww4) wild5
                             0 -> Data.Text.Internal.empty } }
                        GHC.Types.True -> Data.Text.Internal.empty } } }) -}
162d5a6f94a4c249ddd191c168aac60a
  $fYesodPagina15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
1487304aba0100515ceb5327fb4f4abd
  $fYesodPagina16 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x8 :: Data.Text.Internal.Text ->
                 case x8 of wild { Data.Text.Internal.Text dt2 dt3 dt4 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt4 0) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina17 ::
    Yesod.Core.Types.HandlerData
      Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodPagina26
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.Pagina>_N <GHC.Types.IO>_N <Network.Wai.Internal.Request>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Network.Wai.Internal.Request>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.List.elem
                           @ Network.HTTP.Types.Method.Method
                           Data.ByteString.Internal.$fEqByteString
                           (case ipv1 of wild { Network.Wai.Internal.Request ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                            ds2 })
                           Main.$fYesodPagina18 of wild {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True -> GHC.Types.False } #) }) -}
8ec8b4501792d6ad53d9cca9d0664f45
  $fYesodPagina18 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina25
                   Main.$fYesodPagina19) -}
93bc5b9daba6f3652519d1b9129dd137
  $fYesodPagina19 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina24
                   Main.$fYesodPagina20) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina2 ::
    Main.Pagina
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ a152 :: Main.Pagina
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Class.Yesod.defaultShouldLog b c #)) -}
b3060a54b96097253c7327a525abbd4d
  $fYesodPagina20 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina23
                   Main.$fYesodPagina21) -}
54a48e48579f9de31667ca4703e343ac
  $fYesodPagina21 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina22
                   (GHC.Types.[] @ Network.HTTP.Types.Method.Method)) -}
3b3f788c70978fb153928e8ed1d4d995
  $fYesodPagina22 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "TRACE"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
7a5f837e102d3c781aec28f2783dda15
  $fYesodPagina23 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "OPTIONS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
8d8f4bcb7f882a4a8e5e68f33ff7b571
  $fYesodPagina24 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "HEAD"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
0e01a55f9ac37638dfa2a9930a740290
  $fYesodPagina25 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "GET"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina26 ::
    Yesod.Core.Types.HandlerT
      Main.Pagina GHC.Types.IO Network.Wai.Internal.Request
  {- Unfolding: (Yesod.Core.Handler.waiRequest
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                   Main.$fYesodPagina_$s$fMonadHandlerHandlerT) -}
9e1ac19d7863bed8f5de6e02c4e5ce69
  $fYesodPagina27 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: ((Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina28 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadResourceHandlerT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina29 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadBasebHandlerT -}
49ee7bc834aad21fcf7da0cd5cda7665
  $fYesodPagina3 :: Yesod.Core.Types.FileUpload
  {- Strictness: m1,
     Unfolding: (Yesod.Core.Types.FileUploadMemory
                   Main.$fYesodPagina4) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina30 ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadHandlerT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina31 ::
    GHC.Base.String
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a152)
                   eta) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina32 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fApplicativeHandlerT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina33 ::
    GHC.Base.Functor
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Handler.$s$fFunctorHandlerT @ Main.Pagina) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina34 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadIOHandlerT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina35 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadThrowHandlerT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina36 ::
    Yesod.Routes.Class.Route Main.Pagina
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.AuthResult #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (4, True, True)
                (\ ds1 :: Yesod.Routes.Class.Route Main.Pagina
                   ds2 :: GHC.Types.Bool
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Types.Authorized #)) -}
7fb8cca0c95456f5b22e854797c80fdc
  $fYesodPagina4 ::
    Data.ByteString.Internal.ByteString
    -> Network.Wai.Parse.FileInfo ()
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ w1 :: Data.ByteString.Internal.ByteString
                   w2 :: Network.Wai.Parse.FileInfo ()
                   w3 :: GHC.Types.IO Data.ByteString.Internal.ByteString ->
                 Network.Wai.Parse.$wlbsBackEnd
                   @ Data.ByteString.Internal.ByteString
                   @ (Network.Wai.Parse.FileInfo ())
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   w3) -}
6837fb0f135acd03b5048923c80b9e8f
  $fYesodPagina5 :: Yesod.Core.Types.FileUpload
  {- Strictness: m2,
     Unfolding: (Yesod.Core.Types.FileUploadDisk
                   (Network.Wai.Parse.tempFileBackEnd1
                      @ Data.ByteString.Internal.ByteString
                      @ (Network.Wai.Parse.FileInfo ()))
                     `cast`
                   (<Control.Monad.Trans.Resource.InternalState>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <Network.Wai.Parse.FileInfo ()>_R
                    ->_R <GHC.Types.IO Data.ByteString.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.IO.FilePath>_R))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina6 ::
    Main.Pagina
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Pagina
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa2 w1) -}
5a84eb915fa2cd9e1eefc1d6d50cb0bc
  $fYesodPagina7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 7200000000000000) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina8 ::
    Main.Pagina
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, True)
                (\ w :: Main.Pagina
                   w1 :: Yesod.Core.Types.Logger
                   w2 :: Language.Haskell.TH.Syntax.Loc
                   w3 :: Control.Monad.Logger.LogSource
                   w4 :: Control.Monad.Logger.LogLevel
                   w5 :: System.Log.FastLogger.LogStr.LogStr
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa3 w1 w2 w3 w4 w5 w6) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina9 ::
    Main.Pagina
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.Logger #)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Main.Pagina
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Yesod.Core.Class.Yesod.defaultMakeLogger1 eta) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$caddStaticContent ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerT
         Main.Pagina
         GHC.Types.IO
         (GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.Pagina,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])))
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina10
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.ByteString.Lazy.Internal.ByteString>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <GHC.Base.Maybe
                                            (Data.Either.Either
                                               Data.Text.Internal.Text
                                               (Yesod.Routes.Class.Route Main.Pagina,
                                                [(Data.Text.Internal.Text,
                                                  Data.Text.Internal.Text)]))>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N
                                    <GHC.Types.IO>_N
                                    <GHC.Base.Maybe
                                       (Data.Either.Either
                                          Data.Text.Internal.Text
                                          (Yesod.Routes.Class.Route Main.Pagina,
                                           [(Data.Text.Internal.Text,
                                             Data.Text.Internal.Text)]))>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$ccleanPath ::
    Main.Pagina
    -> [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,A><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Pagina w1 :: [Data.Text.Internal.Text] ->
                 Main.$w$ccleanPath w1) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cdefaultLayout ::
    Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO ()
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,U> -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cerrorHandler ::
    Yesod.Core.Types.ErrorResponse
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO Yesod.Core.Types.TypedContent
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cfileUpload ::
    Main.Pagina
    -> Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Pagina w1 :: Network.Wai.Internal.RequestBodyLength ->
                 Main.$w$cfileUpload w1) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cisAuthorized ::
    Yesod.Routes.Class.Route Main.Pagina
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO Yesod.Core.Types.AuthResult
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina36
                  `cast`
                (<Yesod.Routes.Class.Route Main.Pagina>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.AuthResult>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N
                                    <GHC.Types.IO>_N
                                    <Yesod.Core.Types.AuthResult>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cisWriteRequest ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ w :: Yesod.Routes.Class.Route Main.Pagina
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$fYesodPagina17 eta eta1)
                  `cast`
                (<Yesod.Routes.Class.Route Main.Pagina>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <GHC.Types.Bool>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cjoinPath ::
    Main.Pagina
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 4, Strictness: <L,A><L,1*U(U,U,U)><L,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: Main.Pagina
                   w1 :: Data.Text.Internal.Text
                   w2 :: [Data.Text.Internal.Text]
                   w3 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 Main.$w$cjoinPath w1 w2 w3) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cmakeLogger ::
    Main.Pagina -> GHC.Types.IO Yesod.Core.Types.Logger
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina9
                  `cast`
                (<Main.Pagina>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.Logger>_R)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cmakeSessionBackend ::
    Main.Pagina
    -> GHC.Types.IO (GHC.Base.Maybe Yesod.Core.Types.SessionBackend)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina6
                  `cast`
                (<Main.Pagina>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe Yesod.Core.Types.SessionBackend>_R)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cmessageLoggerSource ::
    Main.Pagina
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina8
                  `cast`
                (<Main.Pagina>_R
                 ->_R <Yesod.Core.Types.Logger>_R
                 ->_R <Language.Haskell.TH.Syntax.Loc>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cshouldLogIO ::
    Main.Pagina
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina2
                  `cast`
                (<Main.Pagina>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cyesodMiddleware ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina1
                  `cast`
                (forall res.
                 <Yesod.Core.Content.ToTypedContent res>_R
                 ->_R <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <res>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <res>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$cyesodWithInternalState ::
    Main.Pagina
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
    -> (Control.Monad.Trans.Resource.InternalState -> GHC.Types.IO a)
    -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,A><L,A><L,1*C1(C1(U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ a152
                   ds1 :: Main.Pagina
                   ds2 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
                   eta1 :: Control.Monad.Trans.Resource.InternalState
                           -> GHC.Types.IO a152
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (Control.Exception.Base.bracket
                    @ Control.Monad.Trans.Resource.InternalState
                    @ ()
                    @ a152
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$screateInternalState
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$scloseInternalState
                    eta1)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a152>_R)
                   eta2)
                  `cast`
                (forall a152.
                 <Main.Pagina>_R
                 ->_R <GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)>_R
                 ->_R <Control.Monad.Trans.Resource.InternalState
                       -> GHC.Types.IO a152>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a152>_R)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$dmapproot :: Yesod.Core.Types.Approot Main.Pagina
  {- HasNoCafRefs,
     Unfolding: InlineRule (-1, True, True)
                (Yesod.Core.Types.ApprootRelative @ Main.Pagina) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$dmauthRoute ::
    Main.Pagina
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Main.Pagina ->
                 GHC.Base.Nothing @ (Yesod.Routes.Class.Route Main.Pagina)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$dmjsLoader ::
    Main.Pagina -> Yesod.Core.Types.ScriptLoadPosition Main.Pagina
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Main.Pagina ->
                 Yesod.Core.Types.BottomOfBody @ Main.Pagina) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$dmmaximumContentLength ::
    Main.Pagina
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
    -> GHC.Base.Maybe GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (-1, True, False)
                (\ ds1 :: Main.Pagina
                   ds2 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina) ->
                 GHC.Base.$
                   @ GHC.Word.Word64
                   @ (GHC.Base.Maybe GHC.Word.Word64)
                   (GHC.Base.Just @ GHC.Word.Word64)
                   (GHC.Word.$fNumWord64_$c*
                      (GHC.Word.$fNumWord64_$c*
                         (GHC.Word.$fBitsWord64_$cfromInteger __integer 2)
                         (GHC.Word.$fBitsWord64_$cfromInteger __integer 1024))
                      (GHC.Word.$fBitsWord64_$cfromInteger __integer 1024))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$dmshouldLog ::
    Main.Pagina
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Main.Pagina
                   eta1 :: Control.Monad.Logger.LogSource
                   eta2 :: Control.Monad.Logger.LogLevel ->
                 Yesod.Core.Class.Yesod.defaultShouldLog eta1 eta2) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$dmurlRenderOverride ::
    Main.Pagina
    -> Yesod.Routes.Class.Route Main.Pagina
    -> GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Main.Pagina
                   ds2 :: Yesod.Routes.Class.Route Main.Pagina ->
                 GHC.Base.Nothing @ Data.ByteString.Builder.Internal.Builder) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fApplicativeHandlerT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina33
                  Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c*>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina33
                     GHC.Base.$fMonadIO) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fApplicativeHandlerT_$cpure ::
    a -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152
                   eta :: a152
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a152 eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a152>_R)
                   eta2)
                  `cast`
                (forall a152.
                 <a152>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a152>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a152>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadBasebHandlerT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$fYesodPagina32
                  GHC.Base.$fMonadIO
                  Main.$fYesodPagina30
                  Main.$fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase ::
    GHC.Types.IO α
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta1 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds1 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                  eta1)
                   `cast`
                 (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                           <Main.Pagina>_N <GHC.Types.IO>_N <α>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadHandlerHandlerT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina28
                  (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT_$cliftHandlerT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina28
                     Main.$fYesodPagina27) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadHandlerT ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina32
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>=
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina32
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina32
                     GHC.Base.$fMonadIO)
                  Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure
                  Main.$fYesodPagina31 -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadIOHandlerT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina30
                  Main.$fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadResourceHandlerT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina35
                  Main.$fYesodPagina34
                  Main.$fYesodPagina32
                  Main.$fYesodPagina29
                  (Yesod.Core.Types.$fMonadResourceHandlerT_$cliftResourceT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina35
                     Main.$fYesodPagina34
                     Main.$fYesodPagina32
                     Main.$fYesodPagina29
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadThrowHandlerT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina30
                  Main.$fYesodPagina_$s$fMonadThrowHandlerT_$cthrowM -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPagina_$s$fMonadThrowHandlerT_$cthrowM ::
    GHC.Exception.Exception e =>
    e -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ e
                   @ a152
                   eta :: GHC.Exception.Exception e
                   x8 :: e
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO @ e @ a152 eta x8)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a152>_R)
                   eta2)
                  `cast`
                (forall e a152.
                 <GHC.Exception.Exception e>_R
                 ->_R <e>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a152>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a152>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina :: Yesod.Persist.Core.YesodPersist Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fYesodPersistPagina4
                    `cast`
                  (GHC.Base.Monad
                     (Control.Monad.Trans.Reader.ReaderT
                        (Sym (Main.TFCo:R:YesodPersistBackendPagina[0]))
                        <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_N)_N)_R
                  Main.$fYesodPersistPagina_$crunDB -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina1 ::
    Yesod.Persist.Core.YesodDB Main.Pagina a
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, Strictness: <L,1*C1(U)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a152
                   f :: Yesod.Persist.Core.YesodDB Main.Pagina a152
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodPersistPagina3
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.Pagina>_N
                            <GHC.Types.IO>_N
                            (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                 <Main.Pagina>_N <GHC.Types.IO>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Main.Pagina>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 Main.$fYesodPersistPagina2
                   @ Database.Persist.Sql.Types.SqlBackend
                   @ a152
                   (case ipv1 of wild { Main.Pagina ds2 -> ds2 })
                   (Database.Persist.Sql.Run.runSqlConn
                      @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                      @ a152
                      Main.$fYesodPersistPagina_$s$fMonadBaseControlbHandlerT
                      f `cast`
                      (Control.Monad.Trans.Reader.ReaderT
                         (Sub (Main.TFCo:R:YesodPersistBackendPagina[0]))
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <a152>_N)_R)
                   eta
                   ipv }) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina2 ::
    Data.Pool.Pool a9
    -> (a9 -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO b)
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 4,
     Strictness: <L,1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),U(U,U,U),A)><L,1*C1(C1(C1(U)))><L,U><L,U> -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina3 ::
    Yesod.Core.Types.HandlerT
      Main.Pagina
      GHC.Types.IO
      (Yesod.Core.Class.Handler.HandlerSite
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Unfolding: (Yesod.Core.Handler.getYesod
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                   Main.$fYesodPagina_$s$fMonadHandlerHandlerT) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina4 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPersistPagina_$s$fMonadReaderT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina5 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPersistPagina_$s$fApplicativeReaderT -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina6 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Main.$fYesodPersistPagina_$s$fFunctorReaderT
                   @ Database.Persist.Sql.Types.SqlBackend) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$crunDB ::
    Yesod.Persist.Core.YesodDB Main.Pagina a
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 3, Strictness: <L,1*C1(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPersistPagina1
                  `cast`
                (forall a152.
                 <Yesod.Persist.Core.YesodDB Main.Pagina a152>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a152>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a152>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       Database.Persist.Sql.Types.SqlBackend
                       (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
                  Main.$fYesodPersistPagina6
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$cpure
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*>
                     @ Database.Persist.Sql.Types.SqlBackend
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPersistPagina6
                     Main.$fYesodPagina32)
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c*>
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c<* -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a152
                   @ b
                   eta :: Control.Monad.Trans.Reader.ReaderT
                            Database.Persist.Sql.Types.SqlBackend
                            (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                            a152
                   eta1 :: Control.Monad.Trans.Reader.ReaderT
                             Database.Persist.Sql.Types.SqlBackend
                             (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                             b ->
                 let {
                   f :: Control.Monad.Trans.Reader.ReaderT
                          Database.Persist.Sql.Types.SqlBackend
                          (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                          (b -> b)
                   = Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$
                       @ Database.Persist.Sql.Types.SqlBackend
                       @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                       Main.$fYesodPagina33
                       @ (b -> b)
                       @ a152
                       (GHC.Base.id @ b)
                       eta
                 } in
                 (\ r1 :: Database.Persist.Sql.Types.SqlBackend ->
                  Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                    @ Main.Pagina
                    @ GHC.Types.IO
                    Main.$fYesodPagina33
                    GHC.Base.$fMonadIO
                    @ b
                    @ b
                    (f `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                          <b -> b>_N)
                       r1)
                    (eta1
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                          <b>_N)
                       r1))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                           <Database.Persist.Sql.Types.SqlBackend>_R
                           <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                           <b>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a152
                   @ b
                   eta :: Control.Monad.Trans.Reader.ReaderT
                            Database.Persist.Sql.Types.SqlBackend
                            (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                            a152
                   eta1 :: Control.Monad.Trans.Reader.ReaderT
                             Database.Persist.Sql.Types.SqlBackend
                             (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                             b
                   eta2 :: Database.Persist.Sql.Types.SqlBackend ->
                 Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                   @ Main.Pagina
                   @ GHC.Types.IO
                   Main.$fYesodPagina33
                   GHC.Base.$fMonadIO
                   @ b
                   @ a152
                   ((Main.$fYesodPersistPagina_$s$fFunctorReaderT_$cfmap
                       @ Database.Persist.Sql.Types.SqlBackend
                       @ a152
                       @ (b -> a152)
                       (GHC.Base.const @ a152 @ b)
                       eta)
                      `cast`
                    (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <Database.Persist.Sql.Types.SqlBackend>_R
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <b -> a152>_N)
                      eta2)
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <Database.Persist.Sql.Types.SqlBackend>_R
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <b>_N)
                      eta2))
                  `cast`
                (forall a152 b.
                 <Control.Monad.Trans.Reader.ReaderT
                    Database.Persist.Sql.Types.SqlBackend
                    (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                    a152>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         Database.Persist.Sql.Types.SqlBackend
                         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                               <Database.Persist.Sql.Types.SqlBackend>_R
                               <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                               <a152>_N)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fApplicativeReaderT_$cpure ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152
                   eta :: a152
                   eta1 :: Database.Persist.Sql.Types.SqlBackend
                   eta2 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ((Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure @ a152 eta)
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Main.Pagina>_N <GHC.Types.IO>_N <a152>_N)
                    eta2)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a152>_R)
                   eta3)
                  `cast`
                (forall a152.
                 <a152>_R
                 ->_R Trans
                          (<Database.Persist.Sql.Types.SqlBackend>_R
                           ->_R Trans
                                    (<Yesod.Core.Types.HandlerData
                                        Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                     ->_R Sym (GHC.Types.NTCo:IO[0] <a152>_R))
                                    (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                              <Main.Pagina>_N <GHC.Types.IO>_N <a152>_N)))
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Database.Persist.Sql.Types.SqlBackend>_R
                                    <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                                    <a152>_N))) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
                  (Main.$fYesodPersistPagina_$s$fFunctorReaderT_$cfmap @ r)
                  (Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$
                     @ r
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPagina33) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) a
    -> Control.Monad.Trans.Reader.ReaderT
         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r
                   @ a152
                   @ b
                   f :: a152 -> b
                   m2 :: Control.Monad.Trans.Reader.ReaderT
                           r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) a152
                   x8 :: r ->
                 Yesod.Core.Types.$fFunctorHandlerT_$cfmap
                   @ Main.Pagina
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ a152
                   @ b
                   f
                   (m2
                      `cast`
                    (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <r>_R
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <a152>_N)
                      x8))
                  `cast`
                (forall r a152 b.
                 <a152 -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) a152>_R
                 ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                               <r>_R
                               <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                               <b>_N)) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fMonadBaseControlbHandlerT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina29
                  (Yesod.Core.Types.$fMonadBaseControlbHandlerT_$cliftBaseWith
                     @ GHC.Types.IO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina29
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO)
                  (Yesod.Core.Types.$fMonadBaseControlbHandlerT_$crestoreM
                     @ GHC.Types.IO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina29
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fMonadReaderT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       Database.Persist.Sql.Types.SqlBackend
                       (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
                  Main.$fYesodPersistPagina5
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$c>>=
                     @ Database.Persist.Sql.Types.SqlBackend
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPersistPagina5
                     Main.$fYesodPagina30)
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$c>>
                     @ Database.Persist.Sql.Types.SqlBackend
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPersistPagina5
                     Main.$fYesodPagina30)
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$cpure
                  Main.$fYesodPersistPagina_$s$fMonadReaderT_$cfail -}
cded40edb154341cc052ead338bfbfdf
  $fYesodPersistPagina_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         a
  {- Arity: 2, Strictness: <B,U><B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152
                   msg :: GHC.Base.String
                   eta :: Database.Persist.Sql.Types.SqlBackend ->
                 Main.$fYesodPagina31 @ a152 msg)
                  `cast`
                (forall a152.
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                               <Database.Persist.Sql.Types.SqlBackend>_R
                               <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                               <a152>_N)) -}
f7286216efb9706723413a058dd9aeb8
  $s$fApplicativeLoggingT ::
    GHC.Base.Applicative (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fApplicativeLoggingT1
                  Main.$s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure
                  (Control.Monad.Logger.$fApplicativeLoggingT_$c<*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeLoggingT1
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fApplicativeLoggingT_$c*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeLoggingT1
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fApplicativeLoggingT_$c<*
                     @ GHC.Types.IO
                     Main.$s$fApplicativeLoggingT1
                     GHC.Base.$fMonadIO) -}
5c3c12af2e1897a1dfec9bf2103665e6
  $s$fApplicativeLoggingT1 ::
    GHC.Base.Functor (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeLoggingT_$s$fFunctorLoggingT -}
d64ae2b256f1662bf5062a58a6b2a1be
  $s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure ::
    a -> Control.Monad.Logger.LoggingT GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152
                   eta :: a152
                   eta1 :: Language.Haskell.TH.Syntax.Loc
                           -> Control.Monad.Logger.LogSource
                           -> Control.Monad.Logger.LogLevel
                           -> System.Log.FastLogger.LogStr.LogStr
                           -> GHC.Types.IO ()
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a152 eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a152>_R)
                   eta2)
                  `cast`
                (forall a152.
                 <a152>_R
                 ->_R Trans
                          (<Language.Haskell.TH.Syntax.Loc
                            -> Control.Monad.Logger.LogSource
                            -> Control.Monad.Logger.LogLevel
                            -> System.Log.FastLogger.LogStr.LogStr
                            -> GHC.Types.IO ()>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a152>_R))
                          (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                                    <GHC.Types.IO>_R <a152>_N))) -}
7dc910612c20994c7a8b819e7ab81f1d
  $s$fApplicativeLoggingT_$s$fFunctorLoggingT ::
    GHC.Base.Functor (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  (Control.Monad.Logger.$fFunctorLoggingT_$cfmap
                     @ GHC.Types.IO
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fFunctorLoggingT_$c<$
                     @ GHC.Types.IO
                     GHC.Base.$fMonadIO) -}
69f69ca7013c55dc39cdf761a96d8c0a
  $s$fApplicativeNoLoggingT ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fApplicativeNoLoggingT2
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$cpure
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1) -}
918164d77a99b6785b94f501f35fd7bf
  $s$fApplicativeNoLoggingT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.Wai.Parse.$s$fMonadBasebResourceT_$s$fMonadResourceT -}
5d64da7c10bef6b4104a1df7942c3a63
  $s$fApplicativeNoLoggingT2 ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT -}
3cc0814798f6d752ad0c842e419c53ca
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$cfmap
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$c<$
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT1) -}
7be3873cdf803ec3ab6f4fc725040a9e
  $s$fApplicativeWidgetT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fApplicativeWidgetT1
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
                  (Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fApplicativeWidgetT1
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*>
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<* -}
a4088c6860df4cfa28715a84e04a71de
  $s$fApplicativeWidgetT1 ::
    GHC.Base.Functor
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Class.Yesod.$s$fFunctorWidgetT @ Main.Pagina) -}
6f498a9bdbcb5b007bb2b393bbe6ef27
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*> ::
    Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a152
                   @ b
                   eta :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a152
                   eta1 :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b ->
                 Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                   @ Main.Pagina
                   @ GHC.Types.IO
                   Main.$s$fApplicativeWidgetT1
                   GHC.Base.$fMonadIO
                   @ b
                   @ b
                   (Yesod.Core.Class.Yesod.$s$fFunctorWidgetT_$s$fFunctorWidgetT_$c<$
                      @ Main.Pagina
                      @ (b -> b)
                      @ a152
                      (GHC.Base.id @ b)
                      eta)
                   eta1) -}
67f20ddef7dd5159e6b157e481dcb507
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<* ::
    Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a152
                   @ b
                   eta :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a152
                   eta1 :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b ->
                 Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                   @ Main.Pagina
                   @ GHC.Types.IO
                   Main.$s$fApplicativeWidgetT1
                   GHC.Base.$fMonadIO
                   @ b
                   @ a152
                   (Yesod.Core.Types.$fFunctorWidgetT_$cfmap
                      @ Main.Pagina
                      @ GHC.Types.IO
                      GHC.Base.$fMonadIO
                      @ a152
                      @ (b -> a152)
                      (GHC.Base.const @ a152 @ b)
                      eta)
                   eta1) -}
99287e29005fc84d52e675238fd44694
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure ::
    a -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a152
                   a153 :: a152
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO
                    @ (a152,
                       Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Main.Pagina))
                    (a153,
                     Yesod.Core.Types.$fApplicativeWidgetT_$cmempty
                       @ (Yesod.Routes.Class.Route Main.Pagina)))
                   `cast`
                 (GHC.Types.NTCo:IO[0]
                      <(a152,
                        Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Main.Pagina))>_R)
                   eta1)
                  `cast`
                (forall a152.
                 <a152>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <(a152,
                                           Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route Main.Pagina))>_R))
                          (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a152>_N))) -}
67d77be17a6ebdca011331858aa6eb98
  $s$fMonadBaseControlbLoggingT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT_$dMonadBase
                  (Control.Monad.Logger.$fMonadBaseControlbLoggingT_$cliftBaseWith
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT_$dMonadBase
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO)
                  (Control.Monad.Logger.$fMonadBaseControlbLoggingT_$crestoreM
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT_$dMonadBase
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
b8666335b67f7ab4ac3261bdf147f4cf
  $s$fMonadBaseControlbLoggingT1 ::
    GHC.Base.Monad (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBaseControlbLoggingT_$s$fMonadLoggingT -}
56b614fe29f7c50394b41a77bac56d29
  $s$fMonadBaseControlbLoggingT2 ::
    GHC.Base.String -> Control.Monad.Logger.LoggingT GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Logger.LoggingT GHC.Types.IO a152)
                   eta) -}
977fd879d2bd32f060441720d5e43908
  $s$fMonadBaseControlbLoggingT3 ::
    GHC.Base.Applicative (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeLoggingT -}
72a6d4b59237eedd8919b8d2af900aa8
  $s$fMonadBaseControlbLoggingT_$dMonadBase ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT -}
f7a23cbdbbf31ab16a39d356170561e6
  $s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$s$fMonadBaseControlbLoggingT3
                  GHC.Base.$fMonadIO
                  Main.$s$fMonadBaseControlbLoggingT1
                  Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase -}
cf53c5bde6f59d988f44f22f5a68b5b3
  $s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase ::
    GHC.Types.IO α -> Control.Monad.Logger.LoggingT GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta1 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds1 :: Language.Haskell.TH.Syntax.Loc
                           -> Control.Monad.Logger.LogSource
                           -> Control.Monad.Logger.LogLevel
                           -> System.Log.FastLogger.LogStr.LogStr
                           -> GHC.Types.IO () ->
                  eta1)
                   `cast`
                 (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                           <GHC.Types.IO>_R <α>_N))) -}
99636740e6d34bdc4ebc82fc07336f6a
  $s$fMonadBaseControlbLoggingT_$s$fMonadLoggingT ::
    GHC.Base.Monad (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT3
                  (Control.Monad.Logger.$fMonadLoggingT_$c>>=
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT3
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fMonadLoggingT_$c>>
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT3
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure
                  Main.$s$fMonadBaseControlbLoggingT2 -}
8054f968bfa9ea1ce49484b9bc29ebee
  $s$fMonadBasebWidgetT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$s$fMonadBasebWidgetT3
                  GHC.Base.$fMonadIO
                  Main.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadBasebWidgetT_$cliftBase
                     @ GHC.Types.IO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     GHC.Base.$fApplicativeIO
                     Main.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO
                     Main.$s$fMonadBasebWidgetT1
                     Control.Monad.Base.$fMonadBaseIOIO) -}
ea08fc454b59d6560d476857b72d68e7
  $s$fMonadBasebWidgetT1 ::
    GHC.Base.Monad (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBasebWidgetT_$s$fMonadWidgetT -}
ab4de4f584fb5746f7b1cf3acc2ce767
  $s$fMonadBasebWidgetT2 ::
    GHC.Base.String
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a152)
                   eta) -}
599b60053c22c0f521e5793c52ee4c5c
  $s$fMonadBasebWidgetT3 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeWidgetT -}
1b4815c2f0ecc44c3a52d255b96cb6e4
  $s$fMonadBasebWidgetT_$s$fMonadWidgetT ::
    GHC.Base.Monad (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadBasebWidgetT3
                  (Yesod.Core.Types.$fMonadWidgetT_$c>>=
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadWidgetT_$c>>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
                  Main.$s$fMonadBasebWidgetT2 -}
79f2c8f63df8ba798fd76b1b7a6a6dd6
  $s$fMonadHandlerWidgetT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadHandlerWidgetT1
                  (Yesod.Core.Class.Handler.$fMonadHandlerWidgetT_$cliftHandlerT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadHandlerWidgetT1
                     Main.$fYesodPagina27) -}
87c673ff5cc037709f35ef2de10f2a3c
  $s$fMonadHandlerWidgetT1 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT -}
389c08cde37a890da7a17014aa6ae92d
  $s$fMonadHandlerWidgetT2 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadBasebWidgetT -}
1d1994c9ccd363e41a7223597ddcde2b
  $s$fMonadHandlerWidgetT3 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT -}
58f7696731e0a9ee1757b25116a9883b
  $s$fMonadHandlerWidgetT4 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT -}
6a3f123d0226e76466851c5a9e5a9e9c
  $s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadIOWidgetT_$cliftIO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT1
                     Control.Monad.IO.Class.$fMonadIOIO) -}
74f0b5cf5a020b738fee8063b4a1537f
  $s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadHandlerWidgetT4
                  Main.$s$fMonadHandlerWidgetT3
                  Main.$s$fMonadBasebWidgetT3
                  Main.$s$fMonadHandlerWidgetT2
                  (Yesod.Core.Types.$fMonadResourceWidgetT_$cliftResourceT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadHandlerWidgetT4
                     Main.$s$fMonadHandlerWidgetT3
                     Main.$s$fMonadBasebWidgetT3
                     Main.$s$fMonadHandlerWidgetT2
                     GHC.Base.$fApplicativeIO
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
b1c79cd0d64a9d72a62dbc82687d42e8
  $s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadThrowWidgetT_$cthrowM
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT1
                     Control.Monad.Catch.$fMonadThrowIO) -}
b0f575cd525753613aea9562a4eed3e7
  $s$fMonadIOLoggingT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT1
                  Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase -}
c64600103e264b80e808b5df4db1e507
  $s$fMonadIONoLoggingT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fMonadIONoLoggingT2
                  (Control.Monad.Logger.$fMonadIONoLoggingT_$cliftIO
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT2
                     Main.$s$fMonadIONoLoggingT1) -}
e5f3b42d1e46aee2d866b8919b78cb7a
  $s$fMonadIONoLoggingT1 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.Wai.Parse.$s$fMonadIOResourceT -}
47fff0b370b6c32a9c7c5a54d5a99bc0
  $s$fMonadIONoLoggingT2 ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT -}
f9604dbcd9be09d996b9bbc284cec0ea
  $s$fMonadIONoLoggingT3 ::
    GHC.Base.String
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a152 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Logger.NoLoggingT
                        (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                        a152)
                   eta) -}
95e49f8161c7bf05a42b754008c5ac03
  $s$fMonadIONoLoggingT4 ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT -}
5f55cce32210a1598bf86dad95fb631b
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fMonadIONoLoggingT4
                  (Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT4
                     Main.$s$fApplicativeNoLoggingT1)
                  Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>
                  (Control.Monad.Logger.$fMonadNoLoggingT_$creturn
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT4
                     Main.$s$fApplicativeNoLoggingT1)
                  Main.$s$fMonadIONoLoggingT3 -}
35ac7b8288e7adeda68bcfb745810308
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>> ::
    Control.Monad.Logger.NoLoggingT
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a152
                   @ b
                   m2 :: Control.Monad.Logger.NoLoggingT
                           (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a152
                   k :: Control.Monad.Logger.NoLoggingT
                          (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b ->
                 Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                   @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                   Main.$s$fMonadIONoLoggingT4
                   Main.$s$fApplicativeNoLoggingT1
                   @ a152
                   @ b
                   m2
                   (\ ds1 :: a152 -> k)) -}
d1ad0f673966c7ef97322299612c5877
  $s$fMonadLoggerLoggingT ::
    Control.Monad.Logger.MonadLogger
      (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT1
                  Main.$s$fMonadLoggerLoggingT_$s$fMonadLoggerLoggingT_$cmonadLoggerLog -}
12fa816a908cc455ee4eb0406f94dd84
  $s$fMonadLoggerLoggingT_$s$fMonadLoggerLoggingT_$cmonadLoggerLog ::
    System.Log.FastLogger.LogStr.ToLogStr msg =>
    Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> msg
    -> Control.Monad.Logger.LoggingT GHC.Types.IO ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U))><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ msg
                   $dToLogStr :: System.Log.FastLogger.LogStr.ToLogStr msg
                   a152 :: Language.Haskell.TH.Syntax.Loc
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   d :: msg ->
                 let {
                   lvl145 :: System.Log.FastLogger.LogStr.LogStr
                   = $dToLogStr
                       `cast`
                     (System.Log.FastLogger.LogStr.NTCo:ToLogStr[0] <msg>_N)
                       d
                 } in
                 (\ f :: Language.Haskell.TH.Syntax.Loc
                         -> Control.Monad.Logger.LogSource
                         -> Control.Monad.Logger.LogLevel
                         -> System.Log.FastLogger.LogStr.LogStr
                         -> GHC.Types.IO () ->
                  GHC.Base.id @ (GHC.Types.IO ()) (f a152 b c lvl145))
                   `cast`
                 (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                           <GHC.Types.IO>_R <()>_N))) -}
e4a2036ea2da1ca662cd50651ca4fae7
  $s$fMonadWidgetWidgetT ::
    Yesod.Core.Class.Handler.MonadWidget
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadWidgetWidgetT1
                  (Yesod.Core.Class.Handler.$fMonadWidgetWidgetT_$cliftWidgetT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadWidgetWidgetT1
                     Main.$fYesodPagina27) -}
8d29b79edcbbef39bf54754873696a94
  $s$fMonadWidgetWidgetT1 ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT -}
3c6e26634fdff30fdadedf41b9f86a62
  $stextField ::
    Yesod.Form.Types.Field Main.Handler Data.Text.Internal.Text
  {- Strictness: m,
     Unfolding: InlineRule (0, True, False)
                (Yesod.Form.Types.Field
                   @ Main.Handler
                   @ Data.Text.Internal.Text
                   (\ w3 :: [Data.Text.Internal.Text]
                      w4 :: [Yesod.Core.Types.FileInfo] ->
                    Yesod.Form.Functions.$wparseHelperGen
                      @ Yesod.Form.Types.FormMessage
                      @ Data.Text.Internal.Text
                      @ Main.Handler
                      @ (Yesod.Core.Class.Handler.HandlerSite Main.Handler)
                      Main.$fYesodPagina30
                      Main.$fRenderMessagePaginaFormMessage_$crenderMessage
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <Main.Pagina>_N <GHC.Types.IO>_N)
                                <Yesod.Form.Types.FormMessage>_N))
                      (Data.Either.Right
                         @ Yesod.Form.Types.FormMessage
                         @ Data.Text.Internal.Text)
                      w3)
                   (Yesod.Form.Fields.textField1 @ Main.Handler)
                   Yesod.Form.Types.UrlEncoded) -}
9376cb73a2dafaccd72c9a4527edddce
  $stoWidget7 ::
    Yesod.Core.Types.RY Main.Pagina ~ Yesod.Core.Types.RY Main.Pagina
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ (Yesod.Core.Types.RY Main.Pagina)
                   @ (Yesod.Core.Types.RY Main.Pagina)
                   @~ <Yesod.Core.Types.RY Main.Pagina>_N) -}
30d6364b396a03fc85fac3d1df6c3451
  $w$ccleanPath ::
    [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ w :: [Data.Text.Internal.Text] ->
                 let {
                   corrected :: [Data.Text.Internal.Text]
                   = GHC.List.filter @ Data.Text.Internal.Text Main.$fYesodPagina16 w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        corrected
                        w of wild {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        corrected
                   GHC.Types.True
                   -> Data.Either.Right
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        (GHC.Base.map
                           @ Data.Text.Internal.Text
                           @ Data.Text.Internal.Text
                           Main.$fYesodPagina14
                           w) }) -}
4f43cc1489cb1a50dffe49b74582dfe6
  $w$cfileUpload ::
    Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Network.Wai.Internal.RequestBodyLength ->
                 case w of wild {
                   Network.Wai.Internal.ChunkedBody -> Main.$fYesodPagina5
                   Network.Wai.Internal.KnownLength size
                   -> case size of wild1 { GHC.Word.W64# a152 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# a152 __word 50000) of wild2 {
                        GHC.Types.False -> Main.$fYesodPagina5
                        GHC.Types.True -> Main.$fYesodPagina3 } } }) -}
524f2cc946fae10a4502932c7373f950
  $w$cjoinPath ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.Text.Internal.Text
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 let {
                   a152 :: [GHC.Types.Char]
                   = case w of wild { Data.Text.Internal.Text dt2 dt3 dt4 ->
                     let {
                       a153 :: GHC.Prim.Int# = GHC.Prim.+# dt3 dt4
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ ww :: GHC.Prim.Int# ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww a153) of wild1 {
                           GHC.Types.False
                           -> case GHC.Prim.indexWord16Array# dt2 ww of r# { DEFAULT ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.geWord# r# __word 55296) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1))
                                GHC.Types.True
                                -> case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1))
                                     GHC.Types.True
                                     -> case GHC.Prim.indexWord16Array#
                                               dt2
                                               (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                         10)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                                   65536)))
                                          ($wunfold (GHC.Prim.+# ww 2)) } } } }
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt3 }
                 } in
                 let {
                   ds1 :: Data.ByteString.Builder.Internal.Builder
                   = case GHC.Base.map
                            @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                            @ (Data.ByteString.Internal.ByteString,
                               GHC.Base.Maybe Data.ByteString.Internal.ByteString)
                            Main.$fYesodPagina13
                            w2 of wild {
                       []
                       -> case w1 of wild1 {
                            []
                            -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodPagina12
                            : ds2 ds3
                            -> Network.HTTP.Types.URI.encodePathSegments
                                 (GHC.Base.map
                                    @ Data.Text.Internal.Text
                                    @ Data.Text.Internal.Text
                                    Main.$fYesodPagina11
                                    wild1) }
                       : ipv ipv1
                       -> let {
                            ds2 :: Data.ByteString.Builder.Internal.Builder
                            = case w1 of wild1 {
                                []
                                -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodPagina12
                                : ds3 ds4
                                -> Network.HTTP.Types.URI.encodePathSegments
                                     (GHC.Base.map
                                        @ Data.Text.Internal.Text
                                        @ Data.Text.Internal.Text
                                        Main.$fYesodPagina11
                                        wild1) }
                          } in
                          let {
                            ds3 :: Data.ByteString.Builder.Internal.Builder
                            = case ipv of ww { (,) ww1 ww2 ->
                              Network.HTTP.Types.URI.$wgo
                                Network.HTTP.Types.URI.encodePath1
                                  `cast`
                                (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0]))
                                ww1
                                ww2 }
                          } in
                          let {
                            ds4 :: Data.ByteString.Builder.Internal.Builder
                            = Network.HTTP.Types.URI.encodePath_go ipv1
                          } in
                          (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                           ds2 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                             @ r
                             (ds3 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                @ r
                                (ds4 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                   @ r
                                   eta)))
                            `cast`
                          (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])) }
                 } in
                 (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                  let {
                    w3 :: Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
                    = ds1 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                        @ r
                        eta
                  } in
                  \ w4 :: Data.ByteString.Builder.Internal.BufferRange
                    w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case w4 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                  Main.$wa4 @ r a152 w3 ww1 ww2 w5 })
                   `cast`
                 (Trans
                      (forall r.
                       <Data.ByteString.Builder.Internal.BuildStep r>_R
                       ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                      (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])))) -}
cded40edb154341cc052ead338bfbfdf
  $w$cparseRoute ::
    [Data.Text.Internal.Text]
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
6a889f0fb1bb02a71b729da7d28f7731
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Database.Persist.Class.PersistEntity.Key Main.Clientex
                   w1 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x8 :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowKey4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowKey3
                          (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                             0
                             w `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyClientex[0])) (Main.NTCo:R:KeyClientex[0]))
                             (GHC.Base.++ @ GHC.Types.Char Main.$fShowKey2 x8)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }) -}
19962ec25dab1dee2b0337a74c03fff3
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 20,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
a68174cf49c047668a176d267b77ac2f
  $w$ctoJSON ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 6, Strictness: <S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ ww :: Data.Text.Internal.Text
                   ww1 :: Data.Text.Internal.Text
                   ww2 :: Data.Text.Internal.Text
                   ww3 :: Data.Text.Internal.Text
                   ww4 :: Data.Text.Internal.Text
                   ww5 :: Data.Text.Internal.Text ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Main.$fPersistEntityClientex38,
                            Data.Aeson.Types.Internal.String ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Main.$fPersistEntityClientex36,
                               Data.Aeson.Types.Internal.String ww1)
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Main.$fPersistEntityClientex34,
                                  Data.Aeson.Types.Internal.String ww2)
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Main.$fPersistEntityClientex32,
                                     Data.Aeson.Types.Internal.String ww3)
                                    (GHC.Types.:
                                       @ Data.Aeson.Types.Internal.Pair
                                       (Main.$fPersistEntityClientex30,
                                        Data.Aeson.Types.Internal.String ww4)
                                       (GHC.Types.:
                                          @ Data.Aeson.Types.Internal.Pair
                                          (Main.$fPersistEntityClientex28,
                                           Data.Aeson.Types.Internal.String ww5)
                                          (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt2 { DEFAULT ->
                 (# dt2 #) }) -}
6a889f0fb1bb02a71b729da7d28f7731
  $w$ctoPersistValue ::
    Main.Clientex
    -> (# [(Data.Text.Internal.Text,
            Database.Persist.Types.Base.PersistValue)] #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U,U,U)>, Inline: [0],
     Unfolding: (\ w :: Main.Clientex ->
                 (# Main.$fPersistFieldClientex_$sgo
                      Main.$fPersistFieldClientex12
                      Main.$fPersistFieldClientex2
                      (case w of ww { Main.Clientex ww1 ww2 ww3 ww4 ww5 ww6 ->
                       GHC.Base.map
                         @ Database.Persist.Class.PersistField.SomePersistField
                         @ Database.Persist.Types.Base.PersistValue
                         Database.Persist.Class.PersistField.$fPersistFieldSomePersistField_$ctoPersistValue
                         (GHC.Types.:
                            @ Database.Persist.Class.PersistField.SomePersistField
                            (Database.Persist.Class.PersistField.SomePersistField
                               @ Data.Text.Internal.Text
                               Database.Persist.Class.PersistField.$fPersistFieldText0
                               ww1)
                            (GHC.Types.:
                               @ Database.Persist.Class.PersistField.SomePersistField
                               (Database.Persist.Class.PersistField.SomePersistField
                                  @ Data.Text.Internal.Text
                                  Database.Persist.Class.PersistField.$fPersistFieldText0
                                  ww2)
                               (GHC.Types.:
                                  @ Database.Persist.Class.PersistField.SomePersistField
                                  (Database.Persist.Class.PersistField.SomePersistField
                                     @ Data.Text.Internal.Text
                                     Database.Persist.Class.PersistField.$fPersistFieldText0
                                     ww3)
                                  (GHC.Types.:
                                     @ Database.Persist.Class.PersistField.SomePersistField
                                     (Database.Persist.Class.PersistField.SomePersistField
                                        @ Data.Text.Internal.Text
                                        Database.Persist.Class.PersistField.$fPersistFieldText0
                                        ww4)
                                     (GHC.Types.:
                                        @ Database.Persist.Class.PersistField.SomePersistField
                                        (Database.Persist.Class.PersistField.SomePersistField
                                           @ Data.Text.Internal.Text
                                           Database.Persist.Class.PersistField.$fPersistFieldText0
                                           ww5)
                                        (GHC.Types.:
                                           @ Database.Persist.Class.PersistField.SomePersistField
                                           (Database.Persist.Class.PersistField.SomePersistField
                                              @ Data.Text.Internal.Text
                                              Database.Persist.Class.PersistField.$fPersistFieldText0
                                              ww6)
                                           (GHC.Types.[]
                                              @ Database.Persist.Class.PersistField.SomePersistField))))))) }) #)) -}
cded40edb154341cc052ead338bfbfdf
  $w$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.Pagina
    -> Network.HTTP.Types.Method.Method
    -> Network.HTTP.Types.Version.HttpVersion
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> GHC.Types.Bool
    -> Network.Socket.Types.SockAddr
    -> [Data.Text.Internal.Text]
    -> Network.HTTP.Types.URI.Query
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> Data.Vault.Lazy.Vault
    -> Network.Wai.Internal.RequestBodyLength
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> (Network.Wai.Internal.Response
        -> GHC.Types.IO Network.Wai.Internal.ResponseReceived)
    -> GHC.Types.IO Network.Wai.Internal.ResponseReceived
  {- Arity: 17,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
006d1c496753dad0448788cc68b49210
  $w$sgo5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
6a889f0fb1bb02a71b729da7d28f7731
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Clientex
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
cded40edb154341cc052ead338bfbfdf
  $wa1 ::
    Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
    -> Yesod.Core.Types.YesodRequest
    -> Yesod.Core.Types.RunHandlerEnv Main.Pagina
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Yesod.Core.Types.GHState
    -> (Yesod.Routes.Class.Route Main.Pagina
        -> Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U(U,U)))><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
40e832c9251aec80a655a68132a3a04e
  $wa2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Web.ClientSession.getDefaultKey2
                        Web.ClientSession.defaultKeyFile
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Yesod.Core.Internal.Session.clientSessionDateCacher1
                        Main.$fYesodPagina7
                          `cast`
                        (Trans
                             (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                             (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) getCachedDate _closeDateCacher ->
                 (# ipv2,
                    GHC.Base.Just
                      @ Yesod.Core.Types.SessionBackend
                      (Yesod.Core.Class.Yesod.defaultClientSessionBackend3
                         ipv1
                         getCachedDate
                         Yesod.Core.Class.Yesod.defaultClientSessionBackend2)
                        `cast`
                      (Trans
                           (<Network.Wai.Internal.Request>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <(Data.Map.Base.Map
                                              Data.Text.Internal.Text
                                              Data.ByteString.Internal.ByteString,
                                            Yesod.Core.Types.SessionMap
                                            -> GHC.Types.IO [Yesod.Core.Types.Header])>_R))
                           (Sym (Yesod.Core.Types.NTCo:SessionBackend[0]))) #) } } }) -}
354f59d4b66a7eca6a4dd297eab14e2f
  $wa3 ::
    Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Yesod.Core.Types.Logger
                   w1 :: Language.Haskell.TH.Syntax.Loc
                   w2 :: Control.Monad.Logger.LogSource
                   w3 :: Control.Monad.Logger.LogLevel
                   w4 :: System.Log.FastLogger.LogStr.LogStr
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ w6 :: GHC.Prim.Void#[OneShot] ->
                     case Yesod.Core.Class.Yesod.defaultMessageLoggerSource2
                            (Yesod.Core.Types.loggerDate w)
                            w1
                            w2
                            w3
                            w4
                            w5 of ds2 { (#,#) ipv2 ipv3 ->
                     Yesod.Core.Types.loggerPutStr1 w ipv3 ipv2 }
                 } in
                 case w3 of wild {
                   Control.Monad.Logger.LevelDebug -> (# w5, GHC.Tuple.() #)
                   Control.Monad.Logger.LevelInfo -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelWarn -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelError -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelOther a152 -> $j GHC.Prim.void# }) -}
f00410e3951c1ca52d21dcbef25d3d51
  $wa4 ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U>, Inline: [0] -}
6a889f0fb1bb02a71b729da7d28f7731
  data Clientex
    = Clientex {clientexNome :: !Data.Text.Internal.Text,
                clientexCpf :: !Data.Text.Internal.Text,
                clientexEndereco :: !Data.Text.Internal.Text,
                clientexTelefone :: !Data.Text.Internal.Text,
                clientexCidade :: !Data.Text.Internal.Text,
                clientexEstado :: !Data.Text.Internal.Text}
30af85e165f93b36e75c54329ebb6e92
  type ClientexId =
    Database.Persist.Class.PersistEntity.Key Main.Clientex
a05c7c0cc8013060adee2b81f55e252a
  type Form a =
    Text.Blaze.Html.Html
    -> Yesod.Form.Types.MForm
         Main.Handler (Yesod.Form.Types.FormResult a, Main.Widget)
190f43e594b9e1d94e4c9968c473acec
  type Handler = Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO
cded40edb154341cc052ead338bfbfdf
  data Pagina
    = Pagina {connPool :: Database.Persist.Sql.Types.ConnectionPool}
6a889f0fb1bb02a71b729da7d28f7731
  data instance Database.Persist.Class.PersistEntity.EntityField
                  Main.Clientex typ where
    ClientexId :: typ
                  ~ Database.Persist.Class.PersistEntity.Key Main.Clientex =>
                  Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    ClientexNome :: typ ~ Data.Text.Internal.Text =>
                    Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    ClientexCpf :: typ ~ Data.Text.Internal.Text =>
                   Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    ClientexEndereco :: typ ~ Data.Text.Internal.Text =>
                        Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    ClientexTelefone :: typ ~ Data.Text.Internal.Text =>
                        Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    ClientexCidade :: typ ~ Data.Text.Internal.Text =>
                      Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    ClientexEstado :: typ ~ Data.Text.Internal.Text =>
                      Database.Persist.Class.PersistEntity.EntityField Main.Clientex typ
    RecFlag: Recursive
6a889f0fb1bb02a71b729da7d28f7731
  newtype instance Database.Persist.Class.PersistEntity.Key
                     Main.Clientex
    = ClientexKey {unClientexKey :: Database.Persist.Class.PersistStore.BackendKey
                                      Database.Persist.Sql.Types.SqlBackend}
    RecFlag: Recursive
cded40edb154341cc052ead338bfbfdf
  data instance Yesod.Routes.Class.Route Main.Pagina
    = HomeR | ClienteR | ChecarclienteR Main.ClientexId | ErroR
    RecFlag: Recursive
6a889f0fb1bb02a71b729da7d28f7731
  data instance Database.Persist.Class.PersistEntity.Unique
                  Main.Clientex
    RecFlag: Recursive
6a889f0fb1bb02a71b729da7d28f7731
  axiom TFCo:R:EntityFieldClientextyp::
      Database.Persist.Class.PersistEntity.EntityField Main.Clientex
        = Main.R:EntityFieldClientextyp
6a889f0fb1bb02a71b729da7d28f7731
  axiom TFCo:R:KeyClientex::
      Database.Persist.Class.PersistEntity.Key Main.Clientex
        = Main.R:KeyClientex
6a889f0fb1bb02a71b729da7d28f7731
  axiom TFCo:R:PersistEntityBackendClientex::
      Database.Persist.Class.PersistEntity.PersistEntityBackend
        Main.Clientex
        = Database.Persist.Sql.Types.SqlBackend
cded40edb154341cc052ead338bfbfdf
  axiom TFCo:R:RoutePagina::
      Yesod.Routes.Class.Route Main.Pagina = Main.R:RoutePagina
6a889f0fb1bb02a71b729da7d28f7731
  axiom TFCo:R:UniqueClientex::
      Database.Persist.Class.PersistEntity.Unique Main.Clientex
        = Main.R:UniqueClientex
cded40edb154341cc052ead338bfbfdf
  axiom TFCo:R:YesodPersistBackendPagina::
      Yesod.Persist.Core.YesodPersistBackend Main.Pagina
        = Database.Persist.Sql.Types.SqlBackend
4fd1a9085d9049957ee9d135a0b5fe98
  type Widget = Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO ()
9876442c804e2bf23f2af468b9409237
  clientexCidade :: Main.Clientex -> Data.Text.Internal.Text
  RecSel Main.Clientex
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*H,1*H,1*H,1*H,U(U,U,U),1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
525f1b8a7333121c4409b43971f6d3a1
  clientexCpf :: Main.Clientex -> Data.Text.Internal.Text
  RecSel Main.Clientex
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*H,U(U,U,U),1*H,1*H,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
6ec8a292dbee03c93a64890bb59801b7
  clientexEndereco :: Main.Clientex -> Data.Text.Internal.Text
  RecSel Main.Clientex
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*H,1*H,U(U,U,U),1*H,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
41b1c575f11e3e5bb50688db67f79a8b
  clientexEstado :: Main.Clientex -> Data.Text.Internal.Text
  RecSel Main.Clientex
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*H,1*H,1*H,1*H,1*H,U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
a951e985948b3f25f923a5b22a20af60
  clientexNome :: Main.Clientex -> Data.Text.Internal.Text
  RecSel Main.Clientex
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(U(U,U,U),1*H,1*H,1*H,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
39ad682f99481856feb4d2122c41c6cb
  clientexTelefone :: Main.Clientex -> Data.Text.Internal.Text
  RecSel Main.Clientex
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*H,1*H,1*H,U(U,U,U),1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Clientex ->
                 case ds1 of wild { Main.Clientex ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
fb89b593f68b6ae48491c264f324d3e6
  connPool ::
    Main.Pagina -> Database.Persist.Sql.Types.ConnectionPool
  RecSel Main.Pagina
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(U,U,U,U,U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: Main.Pagina ->
                 case ds1 of wild { Main.Pagina ds2 -> ds2 }) -}
13bb27fdf8484f1cb1639f72bba298b1
  main :: GHC.Types.IO ()
  {- Unfolding: ((Main.main15
                    Main.main14
                    Main.main1
                      `cast`
                    (<Database.Persist.Sql.Types.ConnectionPool>_R
                     ->_R Trans
                              (<Language.Haskell.TH.Syntax.Loc
                                -> Control.Monad.Logger.LogSource
                                -> Control.Monad.Logger.LogLevel
                                -> System.Log.FastLogger.LogStr.LogStr
                                -> GHC.Types.IO ()>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                              (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                                        <GHC.Types.IO>_R <()>_N))))
                   `cast`
                 (Control.Monad.Logger.NTCo:LoggingT[0] <GHC.Types.IO>_R <()>_N)
                   Control.Monad.Logger.runStdoutLoggingT1
                     `cast`
                   (<Language.Haskell.TH.Syntax.Loc>_R
                    ->_R <Control.Monad.Logger.LogSource>_R
                    ->_R <Control.Monad.Logger.LogLevel>_R
                    ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
87e54cc3747f4fb3bff3a5967c06fc90
  main1 ::
    Database.Persist.Sql.Types.ConnectionPool
    -> (Language.Haskell.TH.Syntax.Loc
        -> Control.Monad.Logger.LogSource
        -> Control.Monad.Logger.LogLevel
        -> System.Log.FastLogger.LogStr.LogStr
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Unfolding: (\ pool :: Database.Persist.Sql.Types.ConnectionPool
                   eta :: Language.Haskell.TH.Syntax.Loc
                          -> Control.Monad.Logger.LogSource
                          -> Control.Monad.Logger.LogLevel
                          -> System.Log.FastLogger.LogStr.LogStr
                          -> GHC.Types.IO ()
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Control.Monad.Trans.Resource.runResourceT
                         @ GHC.Types.IO
                         @ ()
                         Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                         (Database.Persist.Sql.Run.$swithResource1
                            @ Database.Persist.Sql.Types.SqlBackend
                            @ ()
                            pool
                            Main.main3)
                           `cast`
                         (Trans
                              (<GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                              (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                        <GHC.Types.IO>_R <()>_N))))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <()>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 Yesod.Core.Dispatch.warp1
                   @ Main.Pagina
                   Main.$fYesodDispatchPagina
                   Main.main2
                   (Main.Pagina pool)
                   ipv }) -}
9acf537b1c49f76b601f898761015f65
  main10 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex7
                   Main.main11) -}
d4a45a91a8f8a6fda06aa198e5fcda6b
  main11 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex6
                   Main.main12) -}
433aa20efb4bf9bceafb1cb93d61d2e8
  main12 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex3
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
93c9ff2d9cdb8a31f673b772658a0f46
  main13 :: [Database.Persist.Types.Base.EntityDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EntityDef
                   Main.main6
                   (GHC.Types.[] @ Database.Persist.Types.Base.EntityDef)) -}
92fe3ceb7acf52c396f1eb63fcff7372
  main14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
eda4ef255215e01db1bba5c73b7160e8
  main15 ::
    GHC.Types.Int
    -> (Database.Persist.Sql.Types.ConnectionPool
        -> Control.Monad.Logger.LoggingT GHC.Types.IO ())
    -> Control.Monad.Logger.LoggingT GHC.Types.IO ()
  {- Unfolding: (Database.Persist.Postgresql.withPostgresqlPool
                   @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                   @ ()
                   Main.$s$fMonadBaseControlbLoggingT
                   Main.$s$fMonadLoggerLoggingT
                   Main.$s$fMonadIOLoggingT
                   Main.main16) -}
9d886932bb9cf005f99d771d9bb27c34
  main16 :: Database.Persist.Postgresql.ConnectionString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr#
                   = "dbname=d73v9jtp1m4gmm host=ec2-23-21-193-140.compute-1.amazonaws.com user=wxijesuruymxxv password=olhACvaEhpoy498TfYAlN_kTYc port=5432"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
6d3d63872377aee6a0e62780e97487bf
  main17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1 @ () Main.main) -}
00fde0c9dd045d16140bf6fe327cb707
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8080) -}
f22c28c103cca4241dcc877593cdf72c
  main3 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) ()
  {- Arity: 1,
     Unfolding: (Database.Persist.Sql.Run.liftSqlPersistMPool_$srunSqlConn
                   @ ()
                   Main.main4
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Database.Persist.Sql.Types.SqlBackend>_R
                             <Control.Monad.Logger.NoLoggingT
                                (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)>_R
                             <()>_N))) -}
1185031ec042f1afc4f4dddca74a8e84
  main4 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   a152 :: Control.Monad.Logger.NoLoggingT
                             (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                             [Data.Text.Internal.Text]
                   = Database.Persist.Sql.Migration.runMigration1
                       @ (Control.Monad.Logger.NoLoggingT
                            (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                       Main.$s$fMonadIONoLoggingT
                       Main.main5
                         `cast`
                       (Trans
                            (<Database.Persist.Sql.Types.SqlBackend>_R
                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                           <(((), [Data.Text.Internal.Text]),
                                             [(GHC.Types.Bool,
                                               Database.Persist.Sql.Types.Sql)])>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Persist.Sql.Types.SqlBackend>_R
                                           <GHC.Types.IO>_R
                                           <(((), [Data.Text.Internal.Text]),
                                             [(GHC.Types.Bool,
                                               Database.Persist.Sql.Types.Sql)])>_N))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                <[(GHC.Types.Bool,
                                                   Database.Persist.Sql.Types.Sql)]>_N
                                                <Control.Monad.Trans.Reader.ReaderT
                                                   Database.Persist.Sql.Types.SqlBackend
                                                   GHC.Types.IO>_R
                                                <((), [Data.Text.Internal.Text])>_N))
                                      (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                <[Data.Text.Internal.Text]>_N
                                                <Control.Monad.Trans.Writer.Lazy.WriterT
                                                   Database.Persist.Sql.Types.CautiousMigration
                                                   (Control.Monad.Trans.Reader.ReaderT
                                                      Database.Persist.Sql.Types.SqlBackend
                                                      GHC.Types.IO)>_R
                                                <()>_N)))))
                       GHC.Types.False
                       eta
                 } in
                 (\ r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (a152
                          `cast`
                        (Trans
                             (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                  <Control.Monad.Trans.Resource.Internal.ResourceT
                                     GHC.Types.IO>_R <[Data.Text.Internal.Text]>_N)
                             (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                  <GHC.Types.IO>_R <[Data.Text.Internal.Text]>_N))
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0] <[Data.Text.Internal.Text]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, GHC.Tuple.() #) })
                   `cast`
                 (Trans
                      (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                     <GHC.Types.IO>_R <()>_N))
                           (Sym (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                     <Control.Monad.Trans.Resource.Internal.ResourceT
                                        GHC.Types.IO>_R) <()>_N)))) -}
6270b560513f96e13aa09f5075762555
  main5 ::
    Database.Persist.Sql.Types.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (((), [Data.Text.Internal.Text]),
           [(GHC.Types.Bool, Database.Persist.Sql.Types.Sql)]) #)
  {- Arity: 2,
     Strictness: <S(LLLLLC(C(C(C(S(LS)))))LLLLLLLL),1*U(C(C1(U(U,U(C(U(U,A)),C(U(U,U)),C(C1(U(U,U))),C(C1(C1(C1(U)))))))),A,A,U(U),A,1*C1(C1(C1(C1(U(U,1*U))))),A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ w2 :: Database.Persist.Sql.Types.SqlBackend
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Database.Persist.Sql.Types.SqlBackend ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Database.Persist.Sql.Migration.$wa
                   Main.main13
                   Main.main6
                   ww1
                   ww4
                   ww6
                   w3 }) -}
bad84a581db551ff7b2f76e0b1a6dd48
  main6 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Clientex"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "clientex"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Yesod.Core.Types.$fSerializeSessionCookie_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt2 { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityClientex16
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntityClientex12))
                   Main.$fPersistEntityClientex39
                   Main.main7
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntityClientex19
                   dt2
                   GHC.Types.False } } } } }) -}
670e650aa881539511fa64eae072ae1e
  main7 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex10
                   Main.main8) -}
a232ec154c8e9310729ed625bf217ac1
  main8 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex9
                   Main.main9) -}
26e13739371bed26d1311df1280ee0f6
  main9 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityClientex8
                   Main.main10) -}
6a889f0fb1bb02a71b729da7d28f7731
  unClientexKey ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistStore.BackendKey
         Database.Persist.Sql.Types.SqlBackend
  RecSel Main.R:KeyClientex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.unClientexKey1
                  `cast`
                (<Database.Persist.Class.PersistEntity.Key Main.Clientex>_R
                 ->_R Trans
                          (Sub (Main.TFCo:R:KeyClientex[0])) (Main.NTCo:R:KeyClientex[0])) -}
6a889f0fb1bb02a71b729da7d28f7731
  unClientexKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.Clientex
    -> Database.Persist.Class.PersistEntity.Key Main.Clientex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Database.Persist.Class.PersistEntity.Key Main.Clientex ->
                 ds1) -}
instance GHC.Classes.Eq [Database.Persist.Class.PersistEntity.Key]
  = Main.$fEqKey
instance GHC.Classes.Eq [Yesod.Routes.Class.Route] = Main.$fEqRoute
instance Web.HttpApiData.Internal.FromHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromHttpApiDataKey
instance Data.Aeson.Types.Class.FromJSON [Main.Clientex]
  = Main.$fFromJSONClientex
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fFromJSONEntity
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromJSONKey
instance GHC.Classes.Ord [Database.Persist.Class.PersistEntity.Key]
  = Main.$fOrdKey
instance Yesod.Routes.Class.ParseRoute [Main.Pagina]
  = Main.$fParseRoutePagina
instance Web.PathPieces.PathPiece [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPathPieceKey
instance Database.Persist.Class.PersistEntity.PersistEntity [Main.Clientex]
  = Main.$fPersistEntityClientex
instance Database.Persist.Class.PersistField.PersistField [Main.Clientex]
  = Main.$fPersistFieldClientex
instance Database.Persist.Class.PersistField.PersistField [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldKey
instance Database.Persist.Sql.Class.PersistFieldSql [Main.Clientex]
  = Main.$fPersistFieldSqlClientex
instance Database.Persist.Sql.Class.PersistFieldSql [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldSqlKey
instance GHC.Read.Read [Database.Persist.Class.PersistEntity.Key]
  = Main.$fReadKey
instance GHC.Read.Read [Yesod.Routes.Class.Route]
  = Main.$fReadRoute
instance Text.Shakespeare.I18N.RenderMessage [Main.Pagina,
                                              Yesod.Form.Types.FormMessage]
  = Main.$fRenderMessagePaginaFormMessage
instance Yesod.Routes.Class.RenderRoute [Main.Pagina]
  = Main.$fRenderRoutePagina
instance Yesod.Routes.Class.RouteAttrs [Main.Pagina]
  = Main.$fRouteAttrsPagina
instance GHC.Show.Show [Main.Clientex] = Main.$fShowClientex
instance GHC.Show.Show [Database.Persist.Class.PersistEntity.Key]
  = Main.$fShowKey
instance GHC.Show.Show [Yesod.Routes.Class.Route]
  = Main.$fShowRoute
instance Database.Persist.Class.PersistStore.ToBackendKey [Database.Persist.Sql.Types.SqlBackend,
                                                           Main.Clientex]
  = Main.$fToBackendKeySqlBackendClientex
instance Web.HttpApiData.Internal.ToHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToHttpApiDataKey
instance Data.Aeson.Types.Class.ToJSON [Main.Clientex]
  = Main.$fToJSONClientex
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fToJSONEntity
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToJSONKey
instance Yesod.Core.Class.Dispatch.YesodDispatch [Main.Pagina]
  = Main.$fYesodDispatchPagina
instance Yesod.Core.Class.Yesod.Yesod [Main.Pagina]
  = Main.$fYesodPagina
instance Yesod.Persist.Core.YesodPersist [Main.Pagina]
  = Main.$fYesodPersistPagina
family instance Database.Persist.Class.PersistEntity.EntityField [Main.Clientex]
  = Main.TFCo:R:EntityFieldClientextyp
family instance Database.Persist.Class.PersistEntity.Key [Main.Clientex]
  = Main.TFCo:R:KeyClientex
family instance Database.Persist.Class.PersistEntity.PersistEntityBackend [Main.Clientex]
  = Main.TFCo:R:PersistEntityBackendClientex
family instance Yesod.Routes.Class.Route [Main.Pagina]
  = Main.TFCo:R:RoutePagina
family instance Database.Persist.Class.PersistEntity.Unique [Main.Clientex]
  = Main.TFCo:R:UniqueClientex
family instance Yesod.Persist.Core.YesodPersistBackend [Main.Pagina]
  = Main.TFCo:R:YesodPersistBackendPagina
"SPEC/Main $WClientexId @ (Key Clientex)" [ALWAYS] forall dt2 :: Database.Persist.Class.PersistEntity.Key
                                                                   Main.Clientex
                                                                 ~ Database.Persist.Class.PersistEntity.Key
                                                                     Main.Clientex
  Main.$WClientexId @ (Database.Persist.Class.PersistEntity.Key
                         Main.Clientex)
                    dt2
  = Main.$fPersistEntityClientex_$s$WClientexId
"SPEC/Main $dmapproot @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                             Main.Pagina
  Yesod.Core.Class.Yesod.$dmapproot @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmapproot
"SPEC/Main $dmauthRoute @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                               Main.Pagina
  Yesod.Core.Class.Yesod.$dmauthRoute @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmauthRoute
"SPEC/Main $dmjsLoader @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                              Main.Pagina
  Yesod.Core.Class.Yesod.$dmjsLoader @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmjsLoader
"SPEC/Main $dmmaximumContentLength @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                          Main.Pagina
  Yesod.Core.Class.Yesod.$dmmaximumContentLength @ Main.Pagina
                                                 $dYesod
  = Main.$fYesodPagina_$s$dmmaximumContentLength
"SPEC/Main $dmreadsPrec @ (Key Clientex)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Database.Persist.Class.PersistEntity.Key
                                                                         Main.Clientex)
  GHC.Read.$dmreadsPrec @ (Database.Persist.Class.PersistEntity.Key
                             Main.Clientex)
                        $dRead
  = Main.$fReadKey_$s$dmreadsPrec
"SPEC/Main $dmreadsPrec @ (Route Pagina)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Yesod.Routes.Class.Route
                                                                         Main.Pagina)
  GHC.Read.$dmreadsPrec @ (Yesod.Routes.Class.Route Main.Pagina)
                        $dRead
  = Main.$fReadRoute_$s$dmreadsPrec
"SPEC/Main $dmshouldLog @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                               Main.Pagina
  Yesod.Core.Class.Yesod.$dmshouldLog @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmshouldLog
"SPEC/Main $dmurlRenderOverride @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                       Main.Pagina
  Yesod.Core.Class.Yesod.$dmurlRenderOverride @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmurlRenderOverride
"SPEC/Main $fApplicativeHandlerT @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                               (Yesod.Core.Types.HandlerT
                                                                                  Main.Pagina
                                                                                  GHC.Types.IO)
                                                                $dMonad :: GHC.Base.Monad
                                                                             GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT @ Main.Pagina
                                         @ GHC.Types.IO
                                         $dFunctor
                                         $dMonad
  = Main.$fYesodPagina_$s$fApplicativeHandlerT
"SPEC/Main $fApplicativeHandlerT_$cpure @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                      (Yesod.Core.Types.HandlerT
                                                                                         Main.Pagina
                                                                                         GHC.Types.IO)
                                                                       $dMonad :: GHC.Base.Monad
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT_$cpure @ Main.Pagina
                                                @ GHC.Types.IO
                                                $dFunctor
                                                $dMonad
  = Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure
"SPEC/Main $fApplicativeLoggingT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                      (Control.Monad.Logger.LoggingT
                                                                         GHC.Types.IO)
                                                       $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Logger.$fApplicativeLoggingT @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Main.$s$fApplicativeLoggingT
"SPEC/Main $fApplicativeLoggingT_$cpure @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                             (Control.Monad.Logger.LoggingT
                                                                                GHC.Types.IO)
                                                              $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Logger.$fApplicativeLoggingT_$cpure @ GHC.Types.IO
                                                    $dFunctor
                                                    $dMonad
  = Main.$s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure
"SPEC/Main $fApplicativeNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                    (Control.Monad.Logger.NoLoggingT
                                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                          GHC.Types.IO))
                                                                     $dMonad :: GHC.Base.Monad
                                                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                     GHC.Types.IO)
  Control.Monad.Logger.$fApplicativeNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                    GHC.Types.IO)
                                               $dFunctor
                                               $dMonad
  = Main.$s$fApplicativeNoLoggingT
"SPEC/Main $fApplicativeReaderT @ SqlBackend @ (HandlerT Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                    (Control.Monad.Trans.Reader.ReaderT
                                                                                                       Database.Persist.Sql.Types.SqlBackend
                                                                                                       (Yesod.Core.Types.HandlerT
                                                                                                          Main.Pagina
                                                                                                          GHC.Types.IO))
                                                                                     $dApplicative :: GHC.Base.Applicative
                                                                                                        (Yesod.Core.Types.HandlerT
                                                                                                           Main.Pagina
                                                                                                           GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ Database.Persist.Sql.Types.SqlBackend
                                                  @ (Yesod.Core.Types.HandlerT
                                                       Main.Pagina GHC.Types.IO)
                                                  $dFunctor
                                                  $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT
"SPEC/Main $fApplicativeReaderT_$c*> @ SqlBackend @ (HandlerT
                                                      Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                               (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                  Database.Persist.Sql.Types.SqlBackend
                                                                                                                                                                  (Yesod.Core.Types.HandlerT
                                                                                                                                                                     Main.Pagina
                                                                                                                                                                     GHC.Types.IO))
                                                                                                                                                $dApplicative :: GHC.Base.Applicative
                                                                                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                                                                                      Main.Pagina
                                                                                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ Database.Persist.Sql.Types.SqlBackend
                                                       @ (Yesod.Core.Types.HandlerT
                                                            Main.Pagina GHC.Types.IO)
                                                       $dFunctor
                                                       $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c*>
"SPEC/Main $fApplicativeReaderT_$c<* @ SqlBackend @ (HandlerT
                                                      Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                               (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                  Database.Persist.Sql.Types.SqlBackend
                                                                                                                                                                  (Yesod.Core.Types.HandlerT
                                                                                                                                                                     Main.Pagina
                                                                                                                                                                     GHC.Types.IO))
                                                                                                                                                $dApplicative :: GHC.Base.Applicative
                                                                                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                                                                                      Main.Pagina
                                                                                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ Database.Persist.Sql.Types.SqlBackend
                                                       @ (Yesod.Core.Types.HandlerT
                                                            Main.Pagina GHC.Types.IO)
                                                       $dFunctor
                                                       $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c<*
"SPEC/Main $fApplicativeReaderT_$cpure @ SqlBackend @ (HandlerT
                                                        Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                      Database.Persist.Sql.Types.SqlBackend
                                                                                                                                                                      (Yesod.Core.Types.HandlerT
                                                                                                                                                                         Main.Pagina
                                                                                                                                                                         GHC.Types.IO))
                                                                                                                                                    $dApplicative :: GHC.Base.Applicative
                                                                                                                                                                       (Yesod.Core.Types.HandlerT
                                                                                                                                                                          Main.Pagina
                                                                                                                                                                          GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cpure @ Database.Persist.Sql.Types.SqlBackend
                                                         @ (Yesod.Core.Types.HandlerT
                                                              Main.Pagina GHC.Types.IO)
                                                         $dFunctor
                                                         $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$cpure
"SPEC/Main $fApplicativeWidgetT @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                              (Yesod.Core.Types.WidgetT
                                                                                 Main.Pagina
                                                                                 GHC.Types.IO)
                                                               $dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT @ Main.Pagina
                                        @ GHC.Types.IO
                                        $dFunctor
                                        $dMonad
  = Main.$s$fApplicativeWidgetT
"SPEC/Main $fApplicativeWidgetT_$c*> @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$c*> @ Main.Pagina
                                             @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*>
"SPEC/Main $fApplicativeWidgetT_$c<* @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$c<* @ Main.Pagina
                                             @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<*
"SPEC/Main $fApplicativeWidgetT_$cpure @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                     (Yesod.Core.Types.WidgetT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                      $dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$cpure @ Main.Pagina
                                               @ GHC.Types.IO
                                               $dFunctor
                                               $dMonad
  = Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
"SPEC/Main $fFunctorLoggingT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                GHC.Types.IO
  Control.Monad.Logger.$fFunctorLoggingT @ GHC.Types.IO $dMonad
  = Main.$s$fApplicativeLoggingT_$s$fFunctorLoggingT
"SPEC/Main $fFunctorNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)
                                           $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT
"SPEC/Main $fFunctorReaderT _ @ (HandlerT Pagina IO)" [ALWAYS] forall @ r
                                                                      $dFunctor :: GHC.Base.Functor
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ r
                                              @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                                              $dFunctor
  = Main.$fYesodPersistPagina_$s$fFunctorReaderT @ r
"SPEC/Main $fFunctorReaderT_$cfmap _ @ (HandlerT Pagina IO)" [ALWAYS] forall @ r
                                                                             $dFunctor :: GHC.Base.Functor
                                                                                            (Yesod.Core.Types.HandlerT
                                                                                               Main.Pagina
                                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ r
                                                     @ (Yesod.Core.Types.HandlerT
                                                          Main.Pagina GHC.Types.IO)
                                                     $dFunctor
  = Main.$fYesodPersistPagina_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Main $fMonadBaseControlbHandlerT @ IO @ Pagina @ IO" [ALWAYS] forall $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                            GHC.Types.IO
                                                                                            (Yesod.Core.Types.HandlerT
                                                                                               Main.Pagina
                                                                                               GHC.Types.IO)
                                                                           $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                   GHC.Types.IO
                                                                                                   GHC.Types.IO
  Yesod.Core.Types.$fMonadBaseControlbHandlerT @ GHC.Types.IO
                                               @ Main.Pagina
                                               @ GHC.Types.IO
                                               $dMonadBase
                                               $dMonadBaseControl
  = Main.$fYesodPersistPagina_$s$fMonadBaseControlbHandlerT
"SPEC/Main $fMonadBaseControlbLoggingT @ IO @ IO" [ALWAYS] forall $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                   GHC.Types.IO
                                                                                   (Control.Monad.Logger.LoggingT
                                                                                      GHC.Types.IO)
                                                                  $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                          GHC.Types.IO
                                                                                          GHC.Types.IO
  Control.Monad.Logger.$fMonadBaseControlbLoggingT @ GHC.Types.IO
                                                   @ GHC.Types.IO
                                                   $dMonadBase
                                                   $dMonadBaseControl
  = Main.$s$fMonadBaseControlbLoggingT
"SPEC/Main $fMonadBasebHandlerT @ IO @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                       GHC.Types.IO
                                                                    $dApplicative1 :: GHC.Base.Applicative
                                                                                        (Yesod.Core.Types.HandlerT
                                                                                           Main.Pagina
                                                                                           GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
                                                                    $dMonad1 :: GHC.Base.Monad
                                                                                  (Yesod.Core.Types.HandlerT
                                                                                     Main.Pagina
                                                                                     GHC.Types.IO)
                                                                    $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                     GHC.Types.IO
                                                                                     GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT @ GHC.Types.IO
                                        @ Main.Pagina
                                        @ GHC.Types.IO
                                        $dApplicative
                                        $dApplicative1
                                        $dMonad
                                        $dMonad1
                                        $dMonadBase
  = Main.$fYesodPagina_$s$fMonadBasebHandlerT
"SPEC/Main $fMonadBasebHandlerT_$cliftBase @ IO @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                  GHC.Types.IO
                                                                               $dApplicative1 :: GHC.Base.Applicative
                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                      Main.Pagina
                                                                                                      GHC.Types.IO)
                                                                               $dMonad :: GHC.Base.Monad
                                                                                            GHC.Types.IO
                                                                               $dMonad1 :: GHC.Base.Monad
                                                                                             (Yesod.Core.Types.HandlerT
                                                                                                Main.Pagina
                                                                                                GHC.Types.IO)
                                                                               $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                GHC.Types.IO
                                                                                                GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT_$cliftBase @ GHC.Types.IO
                                                   @ Main.Pagina
                                                   @ GHC.Types.IO
                                                   $dApplicative
                                                   $dApplicative1
                                                   $dMonad
                                                   $dMonad1
                                                   $dMonadBase
  = Main.$fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase
"SPEC/Main $fMonadBasebLoggingT @ IO @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                              GHC.Types.IO
                                                           $dApplicative1 :: GHC.Base.Applicative
                                                                               (Control.Monad.Logger.LoggingT
                                                                                  GHC.Types.IO)
                                                           $dMonad :: GHC.Base.Monad GHC.Types.IO
                                                           $dMonad1 :: GHC.Base.Monad
                                                                         (Control.Monad.Logger.LoggingT
                                                                            GHC.Types.IO)
                                                           $dMonadBase :: Control.Monad.Base.MonadBase
                                                                            GHC.Types.IO
                                                                            GHC.Types.IO
  Control.Monad.Logger.$fMonadBasebLoggingT @ GHC.Types.IO
                                            @ GHC.Types.IO
                                            $dApplicative
                                            $dApplicative1
                                            $dMonad
                                            $dMonad1
                                            $dMonadBase
  = Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT
"SPEC/Main $fMonadBasebLoggingT_$cliftBase @ IO @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                         GHC.Types.IO
                                                                      $dApplicative1 :: GHC.Base.Applicative
                                                                                          (Control.Monad.Logger.LoggingT
                                                                                             GHC.Types.IO)
                                                                      $dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO
                                                                      $dMonad1 :: GHC.Base.Monad
                                                                                    (Control.Monad.Logger.LoggingT
                                                                                       GHC.Types.IO)
                                                                      $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                       GHC.Types.IO
                                                                                       GHC.Types.IO
  Control.Monad.Logger.$fMonadBasebLoggingT_$cliftBase @ GHC.Types.IO
                                                       @ GHC.Types.IO
                                                       $dApplicative
                                                       $dApplicative1
                                                       $dMonad
                                                       $dMonad1
                                                       $dMonadBase
  = Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase
"SPEC/Main $fMonadBasebWidgetT @ IO @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                      GHC.Types.IO
                                                                   $dApplicative1 :: GHC.Base.Applicative
                                                                                       (Yesod.Core.Types.WidgetT
                                                                                          Main.Pagina
                                                                                          GHC.Types.IO)
                                                                   $dMonad :: GHC.Base.Monad
                                                                                GHC.Types.IO
                                                                   $dMonad1 :: GHC.Base.Monad
                                                                                 (Yesod.Core.Types.WidgetT
                                                                                    Main.Pagina
                                                                                    GHC.Types.IO)
                                                                   $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                    GHC.Types.IO
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebWidgetT @ GHC.Types.IO
                                       @ Main.Pagina
                                       @ GHC.Types.IO
                                       $dApplicative
                                       $dApplicative1
                                       $dMonad
                                       $dMonad1
                                       $dMonadBase
  = Main.$s$fMonadBasebWidgetT
"SPEC/Main $fMonadHandlerHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                      (Yesod.Core.Types.HandlerT
                                                                                         Main.Pagina
                                                                                         GHC.Types.IO)
                                                                 tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                          GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerHandlerT @ Main.Pagina
                                                  @ GHC.Types.IO
                                                  $dMonadResource
                                                  tup
  = Main.$fYesodPagina_$s$fMonadHandlerHandlerT
"SPEC/Main $fMonadHandlerT @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                             (Yesod.Core.Types.HandlerT
                                                                                Main.Pagina
                                                                                GHC.Types.IO)
                                                          $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadHandlerT @ Main.Pagina
                                   @ GHC.Types.IO
                                   $dApplicative
                                   $dMonad
  = Main.$fYesodPagina_$s$fMonadHandlerT
"SPEC/Main $fMonadHandlerWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                     (Yesod.Core.Types.WidgetT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                         GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerWidgetT @ Main.Pagina
                                                 @ GHC.Types.IO
                                                 $dMonadResource
                                                 tup
  = Main.$s$fMonadHandlerWidgetT
"SPEC/Main $fMonadIOHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                         (Yesod.Core.Types.HandlerT
                                                                            Main.Pagina
                                                                            GHC.Types.IO)
                                                            $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                           GHC.Types.IO
  Yesod.Core.Types.$fMonadIOHandlerT @ Main.Pagina
                                     @ GHC.Types.IO
                                     $dMonad
                                     $dMonadIO
  = Main.$fYesodPagina_$s$fMonadIOHandlerT
"SPEC/Main $fMonadIOLoggingT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                (Control.Monad.Logger.LoggingT
                                                                   GHC.Types.IO)
                                                   $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                  GHC.Types.IO
  Control.Monad.Logger.$fMonadIOLoggingT @ GHC.Types.IO
                                         $dMonad
                                         $dMonadIO
  = Main.$s$fMonadIOLoggingT
"SPEC/Main $fMonadIONoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Logger.NoLoggingT
                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                    GHC.Types.IO))
                                                                 $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                   GHC.Types.IO)
  Control.Monad.Logger.$fMonadIONoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)
                                           $dMonad
                                           $dMonadIO
  = Main.$s$fMonadIONoLoggingT
"SPEC/Main $fMonadIOWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                        (Yesod.Core.Types.WidgetT
                                                                           Main.Pagina GHC.Types.IO)
                                                           $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                          GHC.Types.IO
  Yesod.Core.Types.$fMonadIOWidgetT @ Main.Pagina
                                    @ GHC.Types.IO
                                    $dMonad
                                    $dMonadIO
  = Main.$s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT
"SPEC/Main $fMonadLoggerLoggingT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                    (Control.Monad.Logger.LoggingT
                                                                       GHC.Types.IO)
                                                       $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                      GHC.Types.IO
  Control.Monad.Logger.$fMonadLoggerLoggingT @ GHC.Types.IO
                                             $dMonad
                                             $dMonadIO
  = Main.$s$fMonadLoggerLoggingT
"SPEC/Main $fMonadLoggerLoggingT_$cmonadLoggerLog @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                     (Control.Monad.Logger.LoggingT
                                                                                        GHC.Types.IO)
                                                                        $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                       GHC.Types.IO
  Control.Monad.Logger.$fMonadLoggerLoggingT_$cmonadLoggerLog @ GHC.Types.IO
                                                              $dMonad
                                                              $dMonadIO
  = Main.$s$fMonadLoggerLoggingT_$s$fMonadLoggerLoggingT_$cmonadLoggerLog
"SPEC/Main $fMonadLoggingT @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                    (Control.Monad.Logger.LoggingT
                                                                       GHC.Types.IO)
                                                 $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Logger.$fMonadLoggingT @ GHC.Types.IO
                                       $dApplicative
                                       $dMonad
  = Main.$s$fMonadBaseControlbLoggingT_$s$fMonadLoggingT
"SPEC/Main $fMonadNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                  (Control.Monad.Logger.NoLoggingT
                                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                        GHC.Types.IO))
                                                               $dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                               GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                              GHC.Types.IO)
                                         $dApplicative
                                         $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT
"SPEC/Main $fMonadNoLoggingT_$c>> @ (ResourceT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                       (Control.Monad.Logger.NoLoggingT
                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                             GHC.Types.IO))
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                    GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT_$c>> @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO)
                                              $dApplicative
                                              $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>
"SPEC/Main $fMonadReaderT @ SqlBackend @ (HandlerT Pagina IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                     Database.Persist.Sql.Types.SqlBackend
                                                                                                     (Yesod.Core.Types.HandlerT
                                                                                                        Main.Pagina
                                                                                                        GHC.Types.IO))
                                                                               $dMonad :: GHC.Base.Monad
                                                                                            (Yesod.Core.Types.HandlerT
                                                                                               Main.Pagina
                                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ Database.Persist.Sql.Types.SqlBackend
                                            @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                                            $dApplicative
                                            $dMonad
  = Main.$fYesodPersistPagina_$s$fMonadReaderT
"SPEC/Main $fMonadReaderT_$cfail @ SqlBackend @ (HandlerT Pagina IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                            Database.Persist.Sql.Types.SqlBackend
                                                                                                            (Yesod.Core.Types.HandlerT
                                                                                                               Main.Pagina
                                                                                                               GHC.Types.IO))
                                                                                      $dMonad :: GHC.Base.Monad
                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                      Main.Pagina
                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ Database.Persist.Sql.Types.SqlBackend
                                                   @ (Yesod.Core.Types.HandlerT
                                                        Main.Pagina GHC.Types.IO)
                                                   $dApplicative
                                                   $dMonad
  = Main.$fYesodPersistPagina_$s$fMonadReaderT_$cfail
"SPEC/Main $fMonadResourceHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                    (Yesod.Core.Types.HandlerT
                                                                                       Main.Pagina
                                                                                       GHC.Types.IO)
                                                                  $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                 (Yesod.Core.Types.HandlerT
                                                                                    Main.Pagina
                                                                                    GHC.Types.IO)
                                                                  $dApplicative :: GHC.Base.Applicative
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                  $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                   GHC.Types.IO
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                  $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                                  GHC.Types.IO
                                                                  $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                    GHC.Types.IO
                                                                                    GHC.Types.IO
                                                                  $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                     GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceHandlerT @ Main.Pagina
                                           @ GHC.Types.IO
                                           $dMonadThrow
                                           $dMonadIO
                                           $dApplicative
                                           $dMonadBase
                                           $dMonadIO1
                                           $dMonadBase1
                                           $dMonadThrow1
  = Main.$fYesodPagina_$s$fMonadResourceHandlerT
"SPEC/Main $fMonadResourceWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                 $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                (Yesod.Core.Types.WidgetT
                                                                                   Main.Pagina
                                                                                   GHC.Types.IO)
                                                                 $dApplicative :: GHC.Base.Applicative
                                                                                    (Yesod.Core.Types.WidgetT
                                                                                       Main.Pagina
                                                                                       GHC.Types.IO)
                                                                 $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                  GHC.Types.IO
                                                                                  (Yesod.Core.Types.WidgetT
                                                                                     Main.Pagina
                                                                                     GHC.Types.IO)
                                                                 $dApplicative1 :: GHC.Base.Applicative
                                                                                     GHC.Types.IO
                                                                 $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                                 GHC.Types.IO
                                                                 $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                   GHC.Types.IO
                                                                                   GHC.Types.IO
                                                                 $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceWidgetT @ Main.Pagina
                                          @ GHC.Types.IO
                                          $dMonadThrow
                                          $dMonadIO
                                          $dApplicative
                                          $dMonadBase
                                          $dApplicative1
                                          $dMonadIO1
                                          $dMonadBase1
                                          $dMonadThrow1
  = Main.$s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT
"SPEC/Main $fMonadThrowHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                            (Yesod.Core.Types.HandlerT
                                                                               Main.Pagina
                                                                               GHC.Types.IO)
                                                               $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT @ Main.Pagina
                                        @ GHC.Types.IO
                                        $dMonad
                                        $dMonadThrow
  = Main.$fYesodPagina_$s$fMonadThrowHandlerT
"SPEC/Main $fMonadThrowHandlerT_$cthrowM @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                        $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                          GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT_$cthrowM @ Main.Pagina
                                                 @ GHC.Types.IO
                                                 $dMonad
                                                 $dMonadThrow
  = Main.$fYesodPagina_$s$fMonadThrowHandlerT_$cthrowM
"SPEC/Main $fMonadThrowWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                           (Yesod.Core.Types.WidgetT
                                                                              Main.Pagina
                                                                              GHC.Types.IO)
                                                              $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowWidgetT @ Main.Pagina
                                       @ GHC.Types.IO
                                       $dMonad
                                       $dMonadThrow
  = Main.$s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT
"SPEC/Main $fMonadWidgetT @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                            (Yesod.Core.Types.WidgetT
                                                                               Main.Pagina
                                                                               GHC.Types.IO)
                                                         $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadWidgetT @ Main.Pagina
                                  @ GHC.Types.IO
                                  $dApplicative
                                  $dMonad
  = Main.$s$fMonadBasebWidgetT_$s$fMonadWidgetT
"SPEC/Main $fMonadWidgetWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonadHandler :: Yesod.Core.Class.Handler.MonadHandler
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                               tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                        GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadWidgetWidgetT @ Main.Pagina
                                                @ GHC.Types.IO
                                                $dMonadHandler
                                                tup
  = Main.$s$fMonadWidgetWidgetT
"SPEC/Main fromList @ Text" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                       Data.Text.Internal.Text
  Data.Set.Base.fromList @ Data.Text.Internal.Text $dOrd
  = Main.$fRouteAttrsPagina_$sfromList
"SPEC/Main readListDefault @ (Key Clientex)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         (Database.Persist.Class.PersistEntity.Key
                                                                            Main.Clientex)
  GHC.Read.readListDefault @ (Database.Persist.Class.PersistEntity.Key
                                Main.Clientex)
                           $dRead
  = Main.$fReadKey_$sreadListDefault
"SPEC/Main readListDefault @ (Route Pagina)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         (Yesod.Routes.Class.Route
                                                                            Main.Pagina)
  GHC.Read.readListDefault @ (Yesod.Routes.Class.Route Main.Pagina)
                           $dRead
  = Main.$fReadRoute_$sreadListDefault
"SPEC/Main textField @ Handler" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                             Main.Handler
                                                $dRenderMessage :: Text.Shakespeare.I18N.RenderMessage
                                                                     (Yesod.Core.Class.Handler.HandlerSite
                                                                        Main.Handler)
                                                                     Yesod.Form.Types.FormMessage
  Yesod.Form.Fields.textField @ (Yesod.Core.Types.HandlerT
                                   Main.Pagina GHC.Types.IO)
                              $dMonad
                              $dRenderMessage
  = Main.$stextField
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

